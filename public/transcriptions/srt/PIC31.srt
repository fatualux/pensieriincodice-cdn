1
00:00:00,000 --> 00:00:09,960
Pensieri in codice. Idee dal mondo del software, a cura di Valerio Galano.

2
00:00:19,960 --> 00:00:26,320
Salve a tutti e ben ritrovati per un nuovo episodio di Pensieri in codice. Nell'episodio

3
00:00:26,320 --> 00:00:33,720
della serie informatica vintage di oggi parleremo di Visual Basic, un altro di quei linguaggi che

4
00:00:33,720 --> 00:00:38,600
hanno fatto la storia della programmazione. Prima di iniziare però con la lettura del

5
00:00:38,600 --> 00:00:44,520
testo dell'amico Andrea, ci tengo a ringraziare tutti quelli che hanno preso parte alla mia

6
00:00:44,520 --> 00:00:51,520
piccola iniziativa su Docety. Vi ricordo infatti che per tutto il mese di aprile potrete prenotare

7
00:00:51,520 --> 00:00:59,000
delle lezioni private gratuite con me. In queste lezioni potremmo ripassare un po' di informatica

8
00:00:59,000 --> 00:01:05,760
e di programmazione per le scuole superiori. Quindi grazie a tutti e veniamo all'argomento del giorno.

9
00:01:05,760 --> 00:01:20,840
Ad inizio marzo 2020 Microsoft ha pubblicato un post sul suo blog in cui spiega che

10
00:01:20,840 --> 00:01:28,240
continuerà a supportare Visual Basic su .NET 5 ma non aggiungerà più nuove funzionalità né

11
00:01:28,240 --> 00:01:37,600
evolverà il linguaggio. Per chi non lo sapesse .NET 5 è una delle release previste per .NET Standard,

12
00:01:37,600 --> 00:01:44,480
una specifica per l'implementazione dei vari framework Microsoft come il classico .NET

13
00:01:44,480 --> 00:01:50,600
Framework che viene utilizzato per la creazione di applicazioni desktop e applicazioni web ASP

14
00:01:51,360 --> 00:01:58,400
oppure .NET Core, un sotto insieme di .NET Framework ridisegnato per essere open source,

15
00:01:58,400 --> 00:02:06,520
cloud native e multipiattaforma. A differenza di .NET Framework .NET Core non è considerato un

16
00:02:06,520 --> 00:02:13,440
componente di Windows pertanto gli aggiornamenti vengono forniti come pacchetti NuGet e non

17
00:02:13,440 --> 00:02:20,520
tramite Windows Update come invece avviene per il primo. In futuro non prevediamo di

18
00:02:20,520 --> 00:02:25,640
evolvere Visual Basic come linguaggio. Il futuro di Visual Basic si concentrerà sulla

19
00:02:25,640 --> 00:02:31,280
stabilità e la compatibilità tra le versioni .NET Core e .NET Framework di Visual Basic.

20
00:02:31,280 --> 00:02:41,040
Quando Microsoft rilasciò la versione .NET di Visual Basic lo fece insieme a C Sharp all'inizio

21
00:02:41,040 --> 00:02:47,800
dell'era .NET e i due linguaggi iniziarono a crescere di pari passo con aggiornamenti

22
00:02:47,800 --> 00:02:54,760
che introducevano interi set di funzionalità identici per entrambi. Con l'andare del tempo

23
00:02:54,760 --> 00:03:00,200
questo però cambiò. Gli sviluppatori professionisti che adottarono C Sharp e i

24
00:03:00,200 --> 00:03:06,800
tanti fan del classico Visual Basic iniziarono ad abbandonare il linguaggio di fronte alla sempre

25
00:03:06,800 --> 00:03:15,280
più crescente complessità dell'ambiente .NET nelle nuove versioni anche se più potenti. Oggi la

26
00:03:15,280 --> 00:03:21,520
documentazione per sviluppatori in Microsoft è praticamente quasi solo in C Sharp con esempi

27
00:03:21,520 --> 00:03:29,080
di codice sorgente Visual Basic sempre più difficili da trovare. Nel 2017 Microsoft ha

28
00:03:29,080 --> 00:03:34,920
annunciato che la sua strategia originaria di cosviluppo di C Sharp e Visual Basic era

29
00:03:34,920 --> 00:03:41,880
arrivata alla fine. Solo C Sharp avrebbe ottenuto tutte le nuove funzionalità mentre Visual Basic

30
00:03:41,920 --> 00:03:48,880
si sarebbe concentrato sugli scenari più semplici ed accessibili che un tempo dominava. Questo però

31
00:03:48,880 --> 00:03:55,400
non è mai realmente accaduto e Microsoft ha effettivamente abbandonato Visual Basic. L'annuncio

32
00:03:55,400 --> 00:04:04,120
a cui facciamo riferimento all'inizio del post lo rende di fatto ufficiale. Se si è soddisfatti di

33
00:04:04,120 --> 00:04:09,680
NET Framework siate sicuri che sarà supportato finché Windows sarà supportato perché viene

34
00:04:09,680 --> 00:04:16,440
fornito assieme al sistema operativo. Verosimilmente gli sviluppatori Visual Basic

35
00:04:16,440 --> 00:04:25,440
saranno in grado di portare le loro codebase assistenti su .NET Core o presto su .NET 5. Il

36
00:04:25,440 --> 00:04:31,320
problema è che non tutte le tecnologie legacy saranno supportate quindi gli sviluppatori

37
00:04:31,320 --> 00:04:37,600
che utilizzano alcune feature come ad esempio Web Forms o Workflow dovranno attenersi al

38
00:04:37,720 --> 00:04:44,960
classico .NET Framework. Dato che le versioni di quest'ultimo vengono rilasciate nello stesso

39
00:04:44,960 --> 00:04:50,560
bundle delle nuove versioni di Windows, tali applicazioni continueranno a funzionare e

40
00:04:50,560 --> 00:04:57,000
saranno supportate solo finché l'azienda di Redmond non deciderà il ritiro delle versioni di Windows

41
00:04:57,000 --> 00:05:11,960
sottostanti. Ma perché stiamo parlando proprio di Visual Basic? E lo stesso Andrea a spiegarcelo.

42
00:05:11,960 --> 00:05:18,440
Per quanto io non sia mai stato un amante di Visual Basic, la notizia non mi ha lasciato

43
00:05:18,440 --> 00:05:25,200
indifferente. Leggerla ha riavvocato in me alcuni vecchi ricordi della scuola superiore e è lì che

44
00:05:25,200 --> 00:05:30,320
ho potuto usarlo per un po'. Parliamo dei primi anni 2000 e per un ragazzino che iniziava a

45
00:05:30,320 --> 00:05:36,240
conoscere la programmazione a suono di Turbo Pascal e Borland C++ ecco qualcosa di completamente

46
00:05:36,240 --> 00:05:43,480
nuovo. Per uno abituato a schermate blu durante la scrittura del codice o nere durante l'esecuzione

47
00:05:43,480 --> 00:05:47,760
poter creare dei pulsanti per i miei programmi disegnandoli direttamente sulla finestra

48
00:05:47,760 --> 00:05:52,800
dell'interfaccia era qualcosa di assolutamente speciale. Per fare in modo che un pulsante

49
00:05:52,800 --> 00:05:57,440
potesse eseguire un'azione era sufficiente fare doppio clic su di esso nell'ambiente di sviluppo

50
00:05:57,440 --> 00:06:03,520
e scriverne il codice relativo. Agli occhi di allora non era come scrivere il codice C++ pieno

51
00:06:03,520 --> 00:06:08,920
di classi, complessa gestione della memoria e chiamate oscure a funzione di librerie in note.

52
00:06:08,920 --> 00:06:16,120
Era semplicemente codice Visual Basic dall'aspetto amichevole intuitivo con dei

53
00:06:16,120 --> 00:06:19,840
programmi dignitosamente carini che potevano addirittura definirsi tali.

54
00:06:19,840 --> 00:06:27,440
Le origini di Visual Basic si trovano in un glorioso linguaggio di programmazione

55
00:06:27,440 --> 00:06:36,960
creato nel 1964 da John Kemeny e Thomas Kurz, il BASIC. Originariamente esso era

56
00:06:36,960 --> 00:06:42,120
un linguaggio interpretato, progettato per semplificare e rendere la programmazione

57
00:06:42,120 --> 00:06:48,400
più accessibile al mondo. Usando questa filosofia Microsoft integrò un interprete

58
00:06:48,560 --> 00:06:56,080
BASIC all'interno del suo primo sistema operativo MS-DOS. Nonostante l'ampia distribuzione e la

59
00:06:56,080 --> 00:07:01,720
relativa semplicità BASIC non è mai stato in grado di competere con linguaggi compilati più

60
00:07:01,720 --> 00:07:10,320
veloci come C o C++. Pertanto BASIC era comunemente usato per scopi banali o educativi mentre le

61
00:07:10,320 --> 00:07:18,280
applicazioni reali venivano solitamente sviluppate con altri linguaggi. Alla fine degli anni 80 Windows

62
00:07:18,680 --> 00:07:25,000
e altre interfacce grafiche erano agli albori e la maggior parte dei PC utilizzava sistemi

63
00:07:25,000 --> 00:07:31,320
operativi testuali. Più le persone iniziavano a comprendere i vantaggi di un sistema operativo

64
00:07:31,320 --> 00:07:37,840
a interfaccia grafica, più Windows acquisiva popolarità. Sfortunatamente la creazione di

65
00:07:37,840 --> 00:07:43,640
programmi basati su Windows era estremamente difficile ed era necessario scrivere codice

66
00:07:43,640 --> 00:07:49,640
molto complicato solamente per definire l'aspetto dell'interfaccia e il modo in cui un utente

67
00:07:49,640 --> 00:07:56,600
avrebbe potuto interagire con essa. E' proprio in questi anni che Microsoft iniziò ad interessarsi

68
00:07:56,600 --> 00:08:02,520
ad un'applicazione che avrebbe permesso la creazione di form tramite interfaccia visuale.

69
00:08:02,520 --> 00:08:09,160
Un'idea audace per l'epoca poiché la maggior parte dei computer utilizzava immagini grossolane basate

70
00:08:09,160 --> 00:08:15,760
su codici ASCII che raramente somigliavano a qualcosa di reale. L'azienda fondata da Bill Gates

71
00:08:15,760 --> 00:08:22,080
si avvicinò ad un uomo di nome Alan Cooper che aveva creato tale interfaccia la quale sembrava

72
00:08:22,080 --> 00:08:28,520
adatta a soddisfare le esigenze di Microsoft. La compagnia di Cooper, Tripod, aveva fatto

73
00:08:28,520 --> 00:08:34,360
nascere Ruby che non ha nessuna connessione con il linguaggio di programmazione Ruby ma era

74
00:08:34,360 --> 00:08:40,880
un'applicazione che faceva esattamente al caso loro. Ed ecco che, per ovviare alle difficoltà

75
00:08:40,880 --> 00:08:46,480
nella creazione di programmi per Windows, Microsoft pensò bene di comprare Tripod ed

76
00:08:46,480 --> 00:08:53,760
integrare Basic nel loro prodotto di punta. Ruby nasceva con un piccolo linguaggio capace

77
00:08:53,760 --> 00:09:00,120
solamente di supportare i pochi principali comandi di cui una shell necessita. Sin dal

78
00:09:00,120 --> 00:09:05,560
principio l'intenzione di Microsoft era quella di far crescere tale linguaggio o addirittura

79
00:09:05,560 --> 00:09:12,800
sostituirlo del tutto con uno reale. Il linguaggio C fu il candidato forte per parecchio tempo ma

80
00:09:12,800 --> 00:09:20,160
alla fine Microsoft optò per la soluzione casalinga nonché più comoda e scelse Basic. E' così che

81
00:09:20,160 --> 00:09:29,000
nel 1991 nasce Visual Basic 1.0, riutilizzando il concetto di semplicità e parte della sintastica

82
00:09:29,000 --> 00:09:43,000
caratteristica di tale linguaggio. Questo nuovo strumento di sviluppo forniva un modo semplice

83
00:09:43,000 --> 00:09:49,840
e veloce per creare applicazioni Windows. Negli anni successivi Microsoft continuò il lavoro

84
00:09:49,840 --> 00:09:55,640
rilasciando nuove versioni con miglioramenti non solo relativi all'ambiente di sviluppo ma

85
00:09:55,640 --> 00:10:01,760
anche alla modernizzazione del linguaggio sottostante. Questi refactoring includevano

86
00:10:01,760 --> 00:10:08,240
il supporto alla programmazione orientata agli oggetti, la gestione degli eventi ed il superamento

87
00:10:08,240 --> 00:10:14,200
dei limiti di un linguaggio interpretato consentendo ai programmatori di generare codice eseguibile

88
00:10:14,200 --> 00:10:22,080
compilato. Visual Basic come dice la parola stessa è un linguaggio di programmazione visuale guidato

89
00:10:22,080 --> 00:10:29,360
da eventi. Questa è la vera differenza rispetto al vecchio Basic. In Basic la programmazione era

90
00:10:29,360 --> 00:10:35,960
solamente testuale ed il programma eseguito in sequenza. In Visual Basic la programmazione

91
00:10:35,960 --> 00:10:41,800
avviene in un ambiente grafico. Nel vecchio Basic era necessario scrivere il codice del programma

92
00:10:41,800 --> 00:10:46,400
per ogni oggetto grafico che si desiderava visualizzare sullo schermo compresa la sua

93
00:10:46,400 --> 00:10:52,800
posizione e il suo colore. In Visual Basic era sufficiente trascinare e rilasciare qualsiasi

94
00:10:52,800 --> 00:10:58,880
oggetto grafico in un qualsiasi punto del modulo e poi cambiarne il colore in qualsiasi momento

95
00:10:58,880 --> 00:11:04,680
utilizzando le finestre delle proprietà. D'altra parte poiché l'utente poteva fare click su un

96
00:11:04,680 --> 00:11:11,040
determinato oggetto in modo del tutto imprevedibile, ogni oggetto doveva essere programmato

97
00:11:11,040 --> 00:11:16,640
indipendentemente per essere in grado di rispondere a tali eventi. Pertanto un programma

98
00:11:16,640 --> 00:11:23,120
in Visual Basic è composto da molti sottoprogrammi, ognuno con il suo codice corrispondente ed ognuno

99
00:11:23,120 --> 00:11:30,320
potenzialmente eseguibile contemporaneamente ad un altro. Visual Basic originale ha prosperato

100
00:11:30,320 --> 00:11:36,560
per circa un decennio. Ciò che iniziò per essere un ambiente easy per principianti divenne uno

101
00:11:36,560 --> 00:11:42,720
strumento abbastanza valido anche per programmatori senior, che non creavano solo applicazioni

102
00:11:42,720 --> 00:11:49,840
giocattolo. Visual Basic si fece strada negli uffici delle aziende e persino sul web attraverso

103
00:11:49,840 --> 00:11:57,960
ASP, Active Server Pages, che permetteva di creare pagine web in grado di comunicare con

104
00:11:57,960 --> 00:12:06,440
componenti Visual Basic denominati Database e scrivere HTML al volo. Una volta che la platea

105
00:12:06,440 --> 00:12:13,920
era aumentata, immancabilmente iniziarono ad arrivare le prime critiche. I fanatici dell'Object

106
00:12:13,920 --> 00:12:19,800
Oriented lamentavano la mancanza del supporto all'ereditarietà, anche se possiamo considerarla

107
00:12:19,800 --> 00:12:25,040
un'arma a doppio taglio, un ottimo modo per sviluppatori meno esperti di darsi la zappa

108
00:12:25,240 --> 00:12:32,240
sui piedi. Paradossalmente il vero problema fu quello di avere avuto troppo successo. Era così

109
00:12:32,240 --> 00:12:38,240
efficace nel ridurre le barriere d'ingresso ai nuovi programmatori che letteralmente chiunque

110
00:12:38,240 --> 00:12:45,440
poteva usarlo. Principianti disattenti, operai annoiati e studenti, tutti potevano metterci mano

111
00:12:45,440 --> 00:12:50,600
e combinare qualcosa che sarebbe stato molto più difficile su qualsiasi altra piattaforma,

112
00:12:51,120 --> 00:12:57,640
seminando spaghetti code ora qui ora lì. In altre parole, siccome anche per i programmatori

113
00:12:57,640 --> 00:13:03,960
non esperti era abbastanza facile usare Visual Basic, veniva utilizzato da molte persone che

114
00:13:03,960 --> 00:13:09,240
non erano programmatori esperti. La colpa di Visual Basic è stata quella di non fare

115
00:13:09,240 --> 00:13:15,400
nulla per incoraggiare la correzione dello stile e delle abitudini sbagliate di queste persone.

116
00:13:20,600 --> 00:13:30,840
Nel 2002 Microsoft decide una riorganizzazione dell'ecosistema di sviluppo, introducendo un

117
00:13:30,840 --> 00:13:38,120
modo nuovo di fare le cose e facendo uscire .NET. Il nome è dovuto ad una serie di motivi. Primo

118
00:13:38,120 --> 00:13:45,200
fra tutti il fatto che le tecnologie internet fossero roba nuova da figli e poiché .NET

119
00:13:45,320 --> 00:13:52,760
includeva funzionalità web che Microsoft aveva deciso di promuovere. Fu fortemente influenzato

120
00:13:52,760 --> 00:13:58,880
da Java, pieno di tool per comunicare con database, sviluppare siti internet, scrivere

121
00:13:58,880 --> 00:14:05,160
programmi, multitrading e creare connessioni tramite socket. Praticamente ogni caso d'uso

122
00:14:05,160 --> 00:14:11,320
che un developer pro potesse immaginare all'epoca. Vi era un unico grande downside di questa

123
00:14:11,440 --> 00:14:17,320
mini rivoluzione vista dagli occhi di chi utilizzava Visual Basic. E cioè che per

124
00:14:17,320 --> 00:14:23,120
ottenere tutto ciò Microsoft dovette buttare via quasi tutto il classico Visual Basic.

125
00:14:23,120 --> 00:14:30,760
La nuova versione, chiamata VB.NET, sembrava la stessa a prima vista ma introduceva tante

126
00:14:30,760 --> 00:14:36,840
differenze che rompevano la retrocompatibilità. Non si fece molto per i vecchi programmi se non

127
00:14:36,840 --> 00:14:42,360
un wizard di migrazione abbastanza scarno che la maggior parte delle volte era inutile.

128
00:14:42,360 --> 00:14:50,160
Con l'avvento di questo nuovo strumento i programmatori Visual Basic dovettero cambiare

129
00:14:50,160 --> 00:14:56,120
il modo in cui contavano gli elementi dell'array. Non potevano più iniziare da 1 come la gente

130
00:14:56,120 --> 00:15:02,600
comune. Ora si iniziava da 0 come i veri programmatori. I cambiamenti si sa spesso

131
00:15:02,600 --> 00:15:08,400
non sono ben accetti e non passò molto tempo prima che un gruppo di precursori influencer

132
00:15:08,400 --> 00:15:15,560
di Visual Basic volgesse critiche aspre a questo nuovo linguaggio. Si potrebbe supporre che le

133
00:15:15,560 --> 00:15:22,480
modifiche introdotte da .NET abbiano distrutto le fondamenta sulle quali il classico Visual Basic si

134
00:15:22,480 --> 00:15:28,280
fondava e che abbiano messo in moto il suo inevitabile declino. Ma questo a mio avviso

135
00:15:28,640 --> 00:15:35,960
non è corretto. Anche se VB.NET prese una nuova direzione esso portò una caratteristica che il

136
00:15:35,960 --> 00:15:43,360
vecchio Visual Basic non aveva mai avuto. Il rispetto. Ora Visual Basic e C-Sharp stavano

137
00:15:43,360 --> 00:15:49,560
sullo stesso piano. Ogni riga di codice Visual Basic poteva essere tradotta in una riga equivalente

138
00:15:49,560 --> 00:15:56,200
di C-Sharp e viceversa. Entrambi i linguaggi avevano le stesse feature, utilizzavano gli stessi

139
00:15:56,200 --> 00:16:02,680
componenti e compilavano esattamente nella stessa maniera. Infatti quando un linguaggio è

140
00:16:02,680 --> 00:16:08,120
supportato dalla piattaforma .NET vi è un compilatore che traduce i programmi scritti

141
00:16:08,120 --> 00:16:15,280
in tale linguaggio in istruzioni SIL. Ma c'era un problema nell'essere finalmente un linguaggio

142
00:16:15,280 --> 00:16:22,800
degno di questo nome. L'entusiasmo con il quale lo avevano scelto così tante persone era sparito.

143
00:16:23,560 --> 00:16:30,920
Non perché Visual Basic era cambiato ma perché C-Sharp era cambiato. Nella stessa maniera con

144
00:16:30,920 --> 00:16:36,320
la quale Visual Basic aveva acquisito la medesima potenza di C-Sharp, infatti,

145
00:16:36,320 --> 00:16:43,800
C-Sharp aveva guadagnato le stesse comodità che offriva Visual Basic. Ad esempio le funzionalità

146
00:16:43,800 --> 00:16:50,760
di sicurezza e di gestione della memoria introdotte da .NET permettevano agli sviluppatori C-Sharp di

147
00:16:50,760 --> 00:16:57,240
ignorare totalmente le classiche problematiche legate a questi temi, proprio come gli sviluppatori

148
00:16:57,240 --> 00:17:04,760
Visual Basic potevano già fare in passato. In altre parole ora C-Sharp poteva essere utilizzato

149
00:17:04,760 --> 00:17:11,200
da hobbisti, studenti e nuovi programmatori senza rinunciare al suo potere. Improvvisamente

150
00:17:11,200 --> 00:17:13,920
Visual Basic non era più qualcosa di speciale.

151
00:17:21,640 --> 00:17:29,600
Oggi Visual Basic si trova nella stessa situazione descritta inizialmente. Non ha praticamente alcun

152
00:17:29,600 --> 00:17:35,760
peso nella community degli sviluppatori professionisti e non è nemmeno presente nelle

153
00:17:35,760 --> 00:17:43,720
statistiche dei repo di GitHub. Tuttavia è ancora là fuori da qualche parte a tenere insieme macro

154
00:17:43,720 --> 00:17:52,120
di Office e servire vecchi database Access e antiche pagine ASP. Un utilizzo in cui Visual

155
00:17:52,120 --> 00:17:59,360
Basic avrebbe potuto riciclarsi in modo naturale è il mercato dell'istruzione, ma è un discorso che

156
00:17:59,360 --> 00:18:06,320
si poteva fare tanti anni fa. I linguaggi moderni come C-Sharp o Python ora sono abbastanza facili

157
00:18:06,320 --> 00:18:12,760
da esercitare appeal anche tra i principianti. E se si ha bisogno di qualcosa di più semplice

158
00:18:12,760 --> 00:18:17,840
per insegnare coding ai bambini, il mercato odierno offre strumenti di programmazione grafica

159
00:18:17,840 --> 00:18:25,520
molto validi come Scratch. Anche i linguaggi a parentesi graffa come C-Sharp, C, JavaScript e

160
00:18:25,520 --> 00:18:31,840
Java hanno un altro fascino. Imparata la sintassi di uno, infatti, se proprio si deve cambiare ci

161
00:18:31,840 --> 00:18:38,440
si può sentire più propensi a passare ad un altro di essi. Con il crescere dello sviluppo in ambito

162
00:18:38,440 --> 00:18:44,960
web, Microsoft avrebbe potuto tentare la via di una versione di Visual Basic facile da usare

163
00:18:44,960 --> 00:18:52,520
come VB6, che avrebbe potuto essere compilata in JavaScript e abbinata ad un qualche design di

164
00:18:52,520 --> 00:18:59,520
forma HTML predefinito. Ovviamente non sarebbe stato uno strumento adatto a costruire fantasmagoriche

165
00:18:59,520 --> 00:19:05,520
applicazioni web, ma avrebbe potuto tornare utile consentendo a sviluppatori, studenti e appassionati

166
00:19:05,520 --> 00:19:12,080
di creare semplici app online senza l'ingombro del JavaScript. Invece a tal proposito Microsoft

167
00:19:12,080 --> 00:19:18,520
ha creato un prodotto basato su Visual Basic chiamato Light Switch, che è scomparso con la

168
00:19:18,520 --> 00:19:25,540
morte di Silverlight. L'esistenza di Visual Basic è stata già minacciata in precedenza, ma questa

169
00:19:25,540 --> 00:19:31,880
volta è diverso. Il sole è tramontato su uno dei linguaggi di programmazione più famosi al mondo.

170
00:19:35,520 --> 00:19:48,240
Un grazie a tutti voi che avete ascoltato fin qui e agli amici che hanno prestato la loro voce

171
00:19:48,240 --> 00:19:55,480
per questo episodio. La bravissima Chiara del podcast Avrei qualcosa da dire show, andate a

172
00:19:55,480 --> 00:20:01,640
ascoltarlo, vi lascio il link in descrizione perché è divertentissimo, e Andrea Chanot, che oltre ad

173
00:20:01,640 --> 00:20:08,320
aver scritto questo testo ha anche interpretato se stesso. In descrizione trovate il link all'articolo

174
00:20:08,320 --> 00:20:15,960
originale che contiene anche tante immagini interessanti. Per oggi direi che è tutto,

175
00:20:15,960 --> 00:20:21,720
vi saluto e vi do appuntamento al prossimo episodio ricordandovi che il programmatore

176
00:20:21,720 --> 00:20:25,320
risolve i problemi a volte anche usando il computer.

