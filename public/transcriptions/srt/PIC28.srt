1
00:00:00,000 --> 00:00:24,960
Salve a tutti e ben ritrovati per un nuovo episodio di Pensieri in Codice.

2
00:00:25,360 --> 00:00:30,720
Prima di addentrarci nell'argomento di oggi, vi rubo giusto un minuto per fare un paio di annunci.

3
00:00:30,720 --> 00:00:38,400
Innanzitutto è online il nuovo sito di pensieriincodice.it, dove trovate tutte le informazioni su dove

4
00:00:38,400 --> 00:00:43,900
seguire il podcast, come unirvi al gruppo o al canale Telegram, come partecipare alle

5
00:00:43,900 --> 00:00:49,480
discussioni e alle iniziative e, se volete, come sostenere il progetto e dimostrare il

6
00:00:49,480 --> 00:00:52,400
vostro apprezzamento anche senza spendere soldi.

7
00:00:52,880 --> 00:00:57,760
E comunque ricordate che anche solo condividere gli episodi con i vostri amici e conoscenti

8
00:00:57,760 --> 00:00:59,800
è già un aiuto molto apprezzato.

9
00:00:59,800 --> 00:01:05,600
In secondo luogo, volevo informarvi che dopo quasi un anno ho rispolverato il mio profilo

10
00:01:05,600 --> 00:01:07,080
coach su Docety.

11
00:01:07,080 --> 00:01:13,480
Se non la conoscete, Docety è la piattaforma di e-learning sulla quale è possibile seguire

12
00:01:13,480 --> 00:01:16,800
corsi, seminari o lezioni private in videoconferenza.

13
00:01:17,440 --> 00:01:22,640
Per ora io ho attivato il calendario per le lezioni private, quindi se volete fare un

14
00:01:22,640 --> 00:01:28,240
ripasso o un recupero di informatica per le scuole superiori, per corsi universitari

15
00:01:28,240 --> 00:01:33,600
o se siete interessati a una breve consulenza, cliccate sul link che trovate in descrizione

16
00:01:33,600 --> 00:01:40,160
e prenotate una sessione per parlare insieme e capire se è il caso di avviare un percorso

17
00:01:40,160 --> 00:01:41,600
di incontri personalizzati.

18
00:01:41,600 --> 00:01:43,520
La prima mezz'ora è gratuita.

19
00:01:44,000 --> 00:01:50,720
Per il futuro ho inoltre intenzione di caricare alcuni videocorsi e organizzare dei seminari,

20
00:01:50,720 --> 00:01:52,880
quindi mi raccomando restate sintonizzati.

21
00:01:54,160 --> 00:01:59,640
Detto questo direi di fermarci con le comunicazioni di servizio e passare a parlare dell'argomento

22
00:01:59,640 --> 00:02:00,640
del giorno.

23
00:02:00,640 --> 00:02:06,440
L'idea di registrare questo episodio mi è venuta in mente qualche settimana fa quando

24
00:02:06,440 --> 00:02:09,920
ho letto uno stupendo articolo sul blog di Martin Fowler.

25
00:02:10,320 --> 00:02:15,680
Vi lascio il link in descrizione perché è un ottimo punto di partenza per approfondire

26
00:02:15,680 --> 00:02:17,680
il tema di cui parleremo oggi.

27
00:02:17,680 --> 00:02:19,120
E qual è questo tema?

28
00:02:19,120 --> 00:02:21,240
Beh, l'avrete letto nel titolo.

29
00:02:21,240 --> 00:02:23,760
Si tratta di pair programming.

30
00:02:23,760 --> 00:02:30,240
Il pair programming è una tecnica che coinvolge due programmatori per lavorare allo stesso

31
00:02:30,240 --> 00:02:32,400
problema su un unico computer.

32
00:02:32,400 --> 00:02:37,560
Essi lavorano contemporaneamente ad una singola attività e si trovano a discutere i problemi,

33
00:02:37,560 --> 00:02:43,080
a pianificare le operazioni, a scrivere codice e a svolgere tutti i vari compiti rigorosamente

34
00:02:43,080 --> 00:02:44,080
assieme.

35
00:02:44,080 --> 00:02:50,240
Capisco che detta così, in due parole, questa tecnica potrebbe sembrare qualcosa di banale

36
00:02:50,240 --> 00:02:52,640
se non addirittura controproducente.

37
00:02:52,640 --> 00:02:57,840
Due persone che lavorano su un unico computer ad un'occhiata superficiale potrebbero dare

38
00:02:57,840 --> 00:03:00,080
l'impressione di stare sprecando tempo.

39
00:03:00,080 --> 00:03:03,960
Sicuramente verrebbe da pensare che una delle due stia lì a girarsi i pollici.

40
00:03:04,600 --> 00:03:09,680
In realtà, però, il pair programming, se svolto nel rispetto di tutta una serie di

41
00:03:09,680 --> 00:03:16,000
linee guida, può risultare enormemente efficace nel migliorare la qualità del codice e nel

42
00:03:16,000 --> 00:03:21,180
ridurre i tempi di sviluppo nel medio e nel lungo periodo, oltre poi ad avere effetti

43
00:03:21,180 --> 00:03:26,440
positivi su tutto il team, distribuendo la conoscenza del progetto, migliorando i rapporti

44
00:03:26,440 --> 00:03:32,040
interpersonali e favorendo il passaggio di abilità e competenze fra i membri della squadra.

45
00:03:32,760 --> 00:03:38,120
Cerchiamo però di non correre troppo e proviamo a capire in cosa consiste e quali sono i vantaggi

46
00:03:38,120 --> 00:03:41,960
del pair programming analizzando alcuni aspetti di questa tecnica.

47
00:03:42,880 --> 00:03:48,920
Ovviamente in un podcast di 15 minuti non potremo essere esaustivi sull'argomento e per questo

48
00:03:48,920 --> 00:03:54,760
motivo vi rimando all'articolo in descrizione per avere maggiori dettagli e capire come

49
00:03:54,760 --> 00:03:57,080
applicare la tecnica nel concreto.

50
00:03:57,080 --> 00:04:01,400
Noi qui ci limiteremo ad introdurre gli aspetti generici della questione.

51
00:04:02,360 --> 00:04:09,400
Iniziamo col dire che il pair programming si basa su una fortissima componente di pianificazione,

52
00:04:09,400 --> 00:04:15,240
su una buona comunicazione e su tutta una serie di regole più o meno varie da applicare

53
00:04:15,240 --> 00:04:21,120
a seconda del contesto, del carattere e delle abilità dei due componenti della coppia,

54
00:04:21,120 --> 00:04:25,840
della loro conoscenza della tecnologia e del progetto e di molte altre variabili.

55
00:04:25,840 --> 00:04:31,800
Non si tratta quindi banalmente di sedersi in due al pc e litigare su come scrivere

56
00:04:31,800 --> 00:04:32,800
una riga di codice.

57
00:04:32,800 --> 00:04:39,440
I due membri della coppia hanno in ogni momento due ruoli ben definiti e distinti e si occupano

58
00:04:39,440 --> 00:04:43,240
di aspetti diversi della risoluzione dello stesso problema.

59
00:04:43,240 --> 00:04:49,600
La programmazione, almeno quella fatta come si deve, è infatti un processo molto complesso,

60
00:04:49,600 --> 00:04:55,880
è necessario risolvere una miriade di piccoli problemi pratici come operazioni matematiche,

61
00:04:55,880 --> 00:05:01,320
gestione di valori nelle variabili, input, output, cicli, funzioni, accesso ai file,

62
00:05:01,320 --> 00:05:06,720
accesso ai database e qualsiasi altra cosa vi possa venire in mente, mentre al contempo

63
00:05:06,720 --> 00:05:12,440
bisogna tenere d'occhio il quadro generale, cercando di integrare al meglio le modifiche

64
00:05:12,440 --> 00:05:16,280
che si stanno effettuando all'interno di un progetto complessivo.

65
00:05:16,280 --> 00:05:21,920
Oltre a questo bisogna avere competenze sul dominio del problema da risolvere, sulla tecnologia

66
00:05:21,920 --> 00:05:25,960
che si sta utilizzando per risolverlo e sul progetto in cui si sta lavorando.

67
00:05:25,960 --> 00:05:31,440
Tutti questi compiti, che normalmente sono richiesti ad un unico sviluppatore o a più

68
00:05:31,440 --> 00:05:37,800
sviluppatori ma in tempi diversi, nel pair programming vengono essenzialmente suddivisi

69
00:05:37,800 --> 00:05:40,680
nella coppia e svolti in modo parallelo.

70
00:05:40,680 --> 00:05:46,200
I due programmatori lavorano quindi ad una parte del processo e ciascuno dei due si occupa

71
00:05:46,200 --> 00:05:49,600
di tenere conto solo di alcuni aspetti dello sviluppo.

72
00:05:50,240 --> 00:05:55,560
Nella più classica delle versioni del pair programming, i due membri si alternano nei

73
00:05:55,560 --> 00:05:57,960
ruoli di driver e navigator.

74
00:05:57,960 --> 00:06:03,720
Il driver è la persona con le mani sulla tastiera, quella che scrive effettivamente

75
00:06:03,720 --> 00:06:04,720
il codice.

76
00:06:04,720 --> 00:06:10,720
Egli si occupa di risolvere tutti i problemi pratici per conseguire un susseguirsi di

77
00:06:10,720 --> 00:06:11,720
micro obiettivi.

78
00:06:11,720 --> 00:06:17,400
Si può dire che nella coppia ha il ruolo tattico e quindi sceglie come implementare

79
00:06:17,400 --> 00:06:22,400
le funzioni, come passare le variabili, come organizzare i cicli, eccetera, e nel far

80
00:06:22,400 --> 00:06:27,840
ciò ignora appositamente la visione d'insieme e le questioni legate al dominio del problema.

81
00:06:27,840 --> 00:06:34,880
Inoltre, da un punto di vista pratico, è anche buona norma che, mentre lavora, il driver

82
00:06:34,880 --> 00:06:40,400
descriva ciò che sta effettuando non nel dettaglio quanto piuttosto nelle intenzioni.

83
00:06:40,400 --> 00:06:45,120
In pratica, mentre scrive il codice dovrà dire qualcosa del tipo

84
00:06:45,320 --> 00:06:49,920
ora creo una funzione per calcolare la media tra tre numeri

85
00:06:49,920 --> 00:06:55,320
oppure devo scorrere la matrice alla ricerca degli interi positivi

86
00:06:55,320 --> 00:06:57,480
e così via con indicazioni di questo tipo.

87
00:06:57,480 --> 00:07:03,280
Dal canto suo, invece, l'altro ruolo in gioco, il navigator, resta in una posizione

88
00:07:03,280 --> 00:07:04,400
di osservazione.

89
00:07:04,400 --> 00:07:10,560
Segue ciò che sta facendo il driver, fornendo informazioni sul problema e condividendo idee.

90
00:07:11,080 --> 00:07:16,440
In contrapposizione al proprio compagno, il navigator ha un ruolo strategico e tiene

91
00:07:16,440 --> 00:07:18,600
d'occhio il problema stando un passo indietro.

92
00:07:18,600 --> 00:07:24,320
Egli ha una visione di insieme sulla questione e quindi può dare indicazioni, raccogliere

93
00:07:24,320 --> 00:07:29,960
idee e appunti, anticipare le prossime mosse da fare o valutare eventuali problemi che

94
00:07:29,960 --> 00:07:32,560
potrebbero presentarsi nell'immediato futuro.

95
00:07:32,560 --> 00:07:37,800
Inoltre, potendo vedere il codice mentre viene scritto, può anche effettuarne al volo

96
00:07:37,800 --> 00:07:42,040
una code review, riducendo così enormemente il numero di potenziali bug.

97
00:07:42,040 --> 00:07:48,480
Ora, questa divisione dei ruoli può essere più o meno flessibile a seconda delle necessità,

98
00:07:48,480 --> 00:07:54,400
ma è molto importante che le due persone della coppia si scambino con una certa frequenza

99
00:07:54,400 --> 00:07:59,120
per poter svolgere parte del lavoro come driver e parte come navigator.

100
00:07:59,120 --> 00:08:06,320
Non è indispensabile che i due trascorrano lo stesso tempo interpretando entrambi i ruoli,

101
00:08:06,320 --> 00:08:11,600
ma è fondamentale che ciascuno sperimenti i panni dell'altro al fine di sapere come ci

102
00:08:11,600 --> 00:08:14,600
si sente e affinare la propria tecnica.

103
00:08:14,600 --> 00:08:21,040
Al tempo stesso, un eventuale squilibrio nella quantità di tempo speso in un ruolo piuttosto

104
00:08:21,040 --> 00:08:26,240
che in un altro è tranquillamente accettato e può dipendere da moltissimi fattori.

105
00:08:26,240 --> 00:08:31,240
In questa strategia, infatti, si lavora in coppia con l'obiettivo primario di ottenere

106
00:08:31,240 --> 00:08:35,760
un risultato migliore rispetto a ciò che potrebbe fare un singolo programmatore.

107
00:08:36,120 --> 00:08:41,120
Ed è quindi necessario sfruttare al massimo la combinazione dei punti di forza di cui

108
00:08:41,120 --> 00:08:44,800
si dispone e al tempo stesso ridurre al massimo le debolezze.

109
00:08:44,800 --> 00:08:51,360
Per questo motivo, se tra i due c'è un programmatore più esperto dell'altro nell'utilizzo della

110
00:08:51,360 --> 00:08:57,640
tecnologia impiegata o che conosce meglio il progetto o il dominio del problema, questi

111
00:08:57,640 --> 00:09:02,760
trascorrerà almeno all'inizio più tempo nel ruolo di navigator che in quello di driver.

112
00:09:03,200 --> 00:09:08,520
Così facendo, egli avrà modo di trasmettere le proprie competenze al partner, finché

113
00:09:08,520 --> 00:09:13,680
quest'ultimo non riuscirà a colmare il gap e quindi ristabilire una condizione di equilibrio.

114
00:09:23,680 --> 00:09:29,240
Abbiamo dunque visto a grandi linee cosa si intende per pair programming, ma in effetti

115
00:09:29,240 --> 00:09:33,840
quali sono i vantaggi di un approccio che almeno all'apparenza sembra così complesso

116
00:09:33,840 --> 00:09:35,240
da attuare?

117
00:09:35,240 --> 00:09:37,680
Beh, cominciamo dalle cose ovvie.

118
00:09:37,680 --> 00:09:43,440
Innanzitutto, in base a quanto ci siamo già detti nel primo blocco, è chiaro che con

119
00:09:43,440 --> 00:09:48,720
questa tecnica diventa possibile impiegare in modo proficuo due risorse per lavorare

120
00:09:48,720 --> 00:09:50,440
su un solo problema alla volta.

121
00:09:50,440 --> 00:09:56,440
Ed è quindi banale che, con il doppio della forza lavoro, i tempi necessari per completare

122
00:09:56,440 --> 00:10:00,800
un'attività, se non proprio addimezzati, risulteranno comunque molto ridotti.

123
00:10:00,800 --> 00:10:08,200
In secondo luogo, abbiamo detto anche questo anche se di sfuggita, il pair programming permette

124
00:10:08,200 --> 00:10:13,360
al navigator di fare code review al volo sul codice scritto dal driver.

125
00:10:13,360 --> 00:10:19,520
A prima vista potrebbe sembrare una banalità, ma questo semplice fatto implica la possibilità

126
00:10:19,520 --> 00:10:25,460
di scaricare da quest'onere un terzo membro del team, che avrebbe dovuto fare code review

127
00:10:25,460 --> 00:10:31,580
in un secondo momento, e risparmiare così una risorsa è molto tempo sprecato a segnalare

128
00:10:31,580 --> 00:10:34,540
il codice, modificarlo, riverificarlo, eccetera.

129
00:10:34,540 --> 00:10:41,820
Infine, la possibilità di affiancare un navigator esperto del progetto o della tecnologia

130
00:10:41,820 --> 00:10:47,820
ad un driver meno esperto, o addirittura ad una risorsa appena entrata nel team, non è

131
00:10:47,820 --> 00:10:50,020
certo un vantaggio da sottovalutare.

132
00:10:50,020 --> 00:10:53,060
Pensate a quando si è nuovi o inesperti.

133
00:10:53,580 --> 00:10:58,500
Si trascorre molto più tempo a cercare di capire come funziona il progetto che a risolvere

134
00:10:58,500 --> 00:11:00,380
effettivamente le proprie attività.

135
00:11:00,380 --> 00:11:06,340
Si è costretti a chiedere a chi è più esperto, si incappa spesso in errori banali come implementare

136
00:11:06,340 --> 00:11:10,500
codice molto simile a quello che già esiste, e altri problemi del genere.

137
00:11:10,500 --> 00:11:13,860
Nel pair programming tutto questo non esiste.

138
00:11:13,860 --> 00:11:20,220
Il collega esperto è proprio lì accanto, nel ruolo di navigator, ed è pronto a dare

139
00:11:20,220 --> 00:11:25,420
suggerimenti ed eventualmente spiegare parti del software che il driver ancora non conosce.

140
00:11:25,420 --> 00:11:32,200
Al di là di questi vantaggi che sono tutto sommato intuibili, però questa tecnica nasconde

141
00:11:32,200 --> 00:11:36,740
anche un'altra serie di benefici che potrebbero non apparire così evidenti.

142
00:11:36,740 --> 00:11:43,140
Lavorare in coppia, infatti, produce di per sé una serie di vantaggi e innesca delle

143
00:11:43,140 --> 00:11:47,460
dinamiche psicologiche molto differenti rispetto al lavoro in solitaria.

144
00:11:47,700 --> 00:11:52,580
Infatti, il pair programming ad esempio incoraggia enormemente la riflessione.

145
00:11:52,580 --> 00:11:58,620
Due persone che affrontano lo stesso problema in coppia tendono appunto a confrontarsi.

146
00:11:58,620 --> 00:12:04,580
Non cercano la soluzione ragionando solo con la propria testa, ma esternano pensieri e

147
00:12:04,580 --> 00:12:08,700
riflessioni, giungendo insieme all'obiettivo in modo più rapido ed efficace.

148
00:12:08,700 --> 00:12:15,380
In secondo luogo, lavorare in coppia mantiene alto il livello di concentrazione ed evita

149
00:12:15,500 --> 00:12:16,500
le divagazioni.

150
00:12:16,500 --> 00:12:21,820
Questo perché, quando si lavora con un collega, si tende ad avere un approccio più strutturato.

151
00:12:21,820 --> 00:12:26,860
Il pensiero va comunicato ad un'altra persona e per far ciò è necessario riordinare le

152
00:12:26,860 --> 00:12:27,860
proprie idee.

153
00:12:27,860 --> 00:12:32,500
Avere poi un compagno che ti freni quando si rende conto che il tuo ragionamento sta

154
00:12:32,500 --> 00:12:38,780
deraiando è sicuramente un grosso aiuto per evitare di sprecare tempo addentrandosi in

155
00:12:38,780 --> 00:12:41,860
vicoli ciechi o soluzioni inapplicabili.

156
00:12:42,860 --> 00:12:48,340
E poi ancora, con il pair programming si attuano contemporaneamente due modelli di pensiero

157
00:12:48,340 --> 00:12:49,340
differenti.

158
00:12:49,340 --> 00:12:55,420
I ruoli del driver e del navigator sono proprio la personificazione di un modello di pensiero

159
00:12:55,420 --> 00:13:01,420
tattico e di uno strategico, dell'attenzione al dettaglio e di quella al quadro d'insieme,

160
00:13:01,420 --> 00:13:03,700
dell'azione e della pianificazione.

161
00:13:03,700 --> 00:13:10,180
E se ci pensiamo, è veramente difficile trovare una persona che da sola riesca a fare tutto

162
00:13:10,260 --> 00:13:12,260
questo contemporaneamente.

163
00:13:21,700 --> 00:13:26,780
Ma quindi il pair programming è la soluzione a tutti i mali dello sviluppo software?

164
00:13:26,780 --> 00:13:29,700
Dovrebbe essere applicato in qualsiasi progetto?

165
00:13:29,700 --> 00:13:33,300
Come al solito la faccenda non è così semplice.

166
00:13:33,740 --> 00:13:36,460
Il pair programming è una tecnica.

167
00:13:36,460 --> 00:13:43,100
Un'ottima tecnica, ma pur sempre una tecnica che presenta tanti vantaggi ma anche tanti

168
00:13:43,100 --> 00:13:44,100
svantaggi.

169
00:13:44,100 --> 00:13:47,060
Ad esempio può essere molto stancante.

170
00:13:47,060 --> 00:13:52,900
Proprio per via del notevole impiego di energie nella comunicazione e nella concentrazione

171
00:13:52,900 --> 00:13:59,060
necessarie per coordinare il lavoro, questa tecnica può pesare sulle forze dei due partner

172
00:13:59,100 --> 00:14:05,820
al punto che gli esperti sconsigliano di applicarla per più di 6 ore al giorno e in caso di utilizzo

173
00:14:05,820 --> 00:14:09,900
continuativo consigliano anche periodi di pausa per lavoro in solitaria.

174
00:14:09,900 --> 00:14:15,260
Oltre a questo, il pair programming può anche essere complicato da organizzare.

175
00:14:15,260 --> 00:14:21,380
Se uno dei due programmatori o anche entrambi ricevono molte richieste o interruzioni durante

176
00:14:21,380 --> 00:14:28,020
il giorno, se devono partecipare a molte riunioni distribuite in vari orari, trovare il tempo

177
00:14:28,020 --> 00:14:33,820
di dedicarsi contemporaneamente alla stessa attività può diventare complicato e stressante.

178
00:14:33,820 --> 00:14:40,780
E a tutto questo va poi aggiunto che possono esserci difficoltà nei rapporti tra le persone,

179
00:14:40,780 --> 00:14:44,420
magari per motivi caratteriali o per dinamiche aziendali.

180
00:14:44,420 --> 00:14:50,820
E lavorare in coppia, quando non si va d'accordo o si hanno visioni troppo differenti sul modo

181
00:14:50,820 --> 00:14:56,660
di progettare e realizzare software, significa passare il tempo a litigare o, nel migliore

182
00:14:56,660 --> 00:15:03,060
dei casi, che uno o entrambi reprimano il proprio carattere riducendo l'apporto produttivo

183
00:15:03,060 --> 00:15:06,980
alla coppia, rendendo il tutto non sostenibile nel lungo periodo.

184
00:15:06,980 --> 00:15:13,580
D'altro canto, accoppiare persone troppo distanti per esperienza o anzianità o per

185
00:15:13,580 --> 00:15:19,780
gerarchia può rendere la coppia squilibrata, con uno dei due elementi che avrà timore

186
00:15:19,780 --> 00:15:23,700
di condividere le proprie idee e asseconderà eccessivamente l'altro.

187
00:15:24,660 --> 00:15:30,500
Insomma, il pair programming non è la cura miracolosa e non ha nemmeno una ricetta univoca

188
00:15:30,500 --> 00:15:36,340
per l'applicazione, ma è comunque una tecnica molto efficace che porta grandi benefici

189
00:15:36,340 --> 00:15:38,740
sia ai progetti che ai programmatori.

190
00:15:38,740 --> 00:15:44,940
In definitiva, se non l'aveste mai fatto, io vi consiglio di provarla o proporla nell'azienda

191
00:15:44,940 --> 00:15:50,980
in cui lavorate, e magari potreste anche condividere questo podcast con i colleghi per introdurre

192
00:15:50,980 --> 00:15:51,980
l'argomento.

193
00:15:52,940 --> 00:15:57,860
Detto questo, non mi resta che ringraziarvi per l'ascolto, darvi appuntamento al prossimo

194
00:15:57,860 --> 00:15:59,940
episodio e ricordarvi che...

195
00:15:59,940 --> 00:16:05,260
Il programmatore risolve i problemi, a volte, anche usando il computer.

