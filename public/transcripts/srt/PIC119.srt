1
00:00:00,000 --> 00:00:05,920
Sono mesi ormai che il mondo intero è rimasto a bocca aperta dopo aver visto le potenzialità

2
00:00:05,920 --> 00:00:12,000
di chat GPT e le migliaia di applicazioni che ne stanno fiorendo al ritmo di decine

3
00:00:12,000 --> 00:00:13,000
al giorno.

4
00:00:13,000 --> 00:00:15,680
Anche noi ne abbiamo parlato nello scorso episodio.

5
00:00:15,680 --> 00:00:22,160
Ma il machine learning non è fatto solo di large language model che replicano il comportamento

6
00:00:22,160 --> 00:00:23,160
umano.

7
00:00:23,160 --> 00:00:29,840
Esistono altri tipi di intelligenze artificiali basate su approcci differenti e che possono

8
00:00:29,840 --> 00:00:33,040
generare risultati e ricadute anche più importanti.

9
00:00:33,040 --> 00:00:39,540
Noi oggi, approfittando di una notizia che forse non ha avuto il giusto risalto, cogliamo

10
00:00:39,540 --> 00:00:46,320
l'occasione per parlare di una differente forma di machine learning chiamata Deep Reinforcement

11
00:00:46,320 --> 00:00:47,320
Learning.

12
00:00:47,320 --> 00:00:50,160
Ma prima ascoltiamo la sigla.

13
00:00:50,160 --> 00:00:57,240
Sono due mesi, lo so, ti è mancata, anche a me.

14
00:00:57,240 --> 00:00:58,920
Benvenuti su Pensieri in Codice.

15
00:00:59,240 --> 00:01:02,880
Il podcast dove si ragiona da informatici con Valerio Galano.

16
00:01:08,280 --> 00:01:10,520
Cominciamo dalla notizia.

17
00:01:10,520 --> 00:01:16,520
Il 7 giugno di quest'anno, quindi circa un mese e mezzo fa, DeepMind, una sussidiaria

18
00:01:16,520 --> 00:01:22,400
di Google che fa ricerca nel campo dell'intelligenza artificiale, ha annunciato che uno dei suoi

19
00:01:22,400 --> 00:01:29,360
sistemi, in particolare quello chiamato Alphadev, ha sviluppato un nuovo algoritmo

20
00:01:29,360 --> 00:01:32,200
di ordinamento utilizzando il linguaggio Assembly.

21
00:01:32,200 --> 00:01:38,320
Detta così potrebbe sembrare qualcosa di banale, una notizia come tante, ma la realtà

22
00:01:38,320 --> 00:01:41,640
è che si tratta di un passo in avanti molto importante.

23
00:01:41,640 --> 00:01:48,680
Questo nuovo algoritmo, infatti, ha la caratteristica di essere più efficiente di tutti i suoi predecessori

24
00:01:48,680 --> 00:01:51,760
implementati fino ad ora da intelligenze umane.

25
00:01:52,200 --> 00:01:58,160
I ricercatori informatici lavorano continuamente nel tentativo di migliorare le performance

26
00:01:58,160 --> 00:02:04,280
degli algoritmi di base e, nello specifico, per quelli di ordinamento, erano anni che

27
00:02:04,280 --> 00:02:09,280
non veniva realizzato qualcosa che risultasse più veloce di quelli già conosciuti.

28
00:02:09,280 --> 00:02:16,120
Con l'impiego di Alphadev, invece, questo limite è stato superato ed è una cosa emblematica

29
00:02:16,120 --> 00:02:18,520
che colpisce sotto tanti punti di vista.

30
00:02:18,960 --> 00:02:25,520
Innanzitutto perché, parlando pragmaticamente, un migliore algoritmo di ordinamento ha ricadute

31
00:02:25,520 --> 00:02:30,560
positive enormi sul mondo reale, a breve ne parleremo in modo più approfondito.

32
00:02:30,560 --> 00:02:36,280
Ma oltre a ciò, da un punto di vista più generale, questo avvenimento ci dà un'idea

33
00:02:36,280 --> 00:02:41,200
di quali siano le grandi potenzialità di un sistema di machine learning quando viene

34
00:02:41,200 --> 00:02:46,920
utilizzato effettivamente per superare quelli che sono i limiti dell'inventiva umana.

35
00:02:47,440 --> 00:02:52,960
Ma procediamo con ordine e facciamo un passo indietro perché, per capire bene gli aspetti

36
00:02:52,960 --> 00:02:58,760
più interessanti di questa vicenda, è necessario conoscere un paio di concetti.

37
00:02:58,760 --> 00:03:05,320
Quindi, innanzitutto, ripassiamo brevemente cos'è un algoritmo di ordinamento, che cos'è

38
00:03:05,320 --> 00:03:11,440
il linguaggio Assembly e poi parliamo di come funziona Alphadev e di che cosa è stato in

39
00:03:11,440 --> 00:03:12,680
grado di produrre.

40
00:03:17,920 --> 00:03:25,720
Senza entrare nel campo tecnico, un algoritmo di ordinamento, lo dice il nome stesso, è

41
00:03:25,720 --> 00:03:28,520
un algoritmo che serve ad ordinare qualcosa.

42
00:03:28,520 --> 00:03:34,440
Nella sua forma più semplice, solitamente questo qualcosa sono numeri, perché i computer

43
00:03:34,440 --> 00:03:36,600
lavorano essenzialmente con i numeri.

44
00:03:36,600 --> 00:03:44,920
Quindi, banalmente, se avessi una lista come 7, 1 e 499, potrei utilizzare uno dei tanti

45
00:03:44,920 --> 00:03:51,000
algoritmi di ordinamento già esistenti per trasformarla in 1, 7 e 499.

46
00:03:51,000 --> 00:03:56,960
Ovviamente, la mia lista potrebbe essere di tre numeri, ma anche di due, di uno o di un

47
00:03:56,960 --> 00:04:03,200
miliardo, poco importa, alla fine dell'esecuzione l'algoritmo me la dovrebbe restituire ordinata.

48
00:04:03,200 --> 00:04:07,360
Ok, bene, ma a cosa serve ordinare dei numeri?

49
00:04:07,360 --> 00:04:13,040
Beh, diciamo che in campo informatico serve praticamente per qualsiasi cosa.

50
00:04:13,160 --> 00:04:19,640
Se ti stai immaginando una colonna di numeri in Excel che si può ordinare con un clic,

51
00:04:19,640 --> 00:04:23,200
sappi che la storia è molto più complicata di così.

52
00:04:23,200 --> 00:04:28,400
Nel software in generale, operare su dati ordinati è più conveniente che farlo su

53
00:04:28,400 --> 00:04:30,080
dati organizzati in modo casuale.

54
00:04:30,080 --> 00:04:35,720
Pertanto, qualsiasi programma, procedura, sistema, esegue ordinamenti ogni volta che

55
00:04:35,720 --> 00:04:38,880
ciò è conveniente dal punto di vista computazionale.

56
00:04:39,280 --> 00:04:44,440
Ovviamente non lo fa di sua spontanea volontà, ma sono i programmatori che, ogni qualvolta

57
00:04:44,440 --> 00:04:51,040
devono implementare un algoritmo, possono decidere se ordinarne i dati sia un atto migliorativo

58
00:04:51,040 --> 00:04:54,040
o meno per lo scopo che si sono prefissi.

59
00:04:54,040 --> 00:04:58,840
E questo tipo di operazioni è presente a tutti i livelli.

60
00:04:58,840 --> 00:05:03,680
Può ordinare l'utente quando, ad esempio, filtra una lista o, come dicevamo poco fa,

61
00:05:03,680 --> 00:05:05,120
ordina una colonna Excel.

62
00:05:05,440 --> 00:05:08,680
Può ordinare un software prima di lavorare su dei dati.

63
00:05:08,680 --> 00:05:12,400
Può ordinare un componente hardware prima di eseguire certe operazioni.

64
00:05:12,400 --> 00:05:19,160
E il discorso può essere complicato o poi a piacere, se pensi che in informatica tutto

65
00:05:19,160 --> 00:05:20,640
è espresso per mezzo di numeri.

66
00:05:20,640 --> 00:05:23,520
I caratteri, i simboli, i dati, gli oggetti.

67
00:05:23,520 --> 00:05:28,840
Alla fine sono tutti numeri e quindi tutti possono essere ordinati in qualche modo.

68
00:05:28,840 --> 00:05:33,800
Ed è grazie a questo fatto che il nostro computer può ricercare all'interno dei nostri

69
00:05:33,880 --> 00:05:36,880
harddisk, file, archivi cloud, eccetera.

70
00:05:36,880 --> 00:05:42,160
Ed è sempre grazie all'ordinamento delle informazioni se può restituirci risultati

71
00:05:42,160 --> 00:05:43,480
in tempi brevi.

72
00:05:43,480 --> 00:05:49,280
Immagina il tuo harddisk come un elenco telefonico o un dizionario, se non fosse ordinato in

73
00:05:49,280 --> 00:05:53,560
qualche modo, quanto ci vorrebbe per trovare un numero o una parola.

74
00:05:53,560 --> 00:05:59,640
E poi, oltre che per l'efficienza, l'ordinamento è importante anche a livello funzionale, per

75
00:05:59,640 --> 00:06:00,920
l'esperienza utente.

76
00:06:01,080 --> 00:06:06,720
Immagina di ricevere i risultati di un motore di ricerca non ordinati per attinenza.

77
00:06:06,720 --> 00:06:12,200
Sarebbero praticamente inutili, dovresti spulciare decine e decine di pagine ogni volta.

78
00:06:12,200 --> 00:06:19,120
Insomma, l'ordinamento è fondamentale praticamente in ogni aspetto della gestione delle informazioni,

79
00:06:19,120 --> 00:06:21,360
sia digitali che analogiche.

80
00:06:21,360 --> 00:06:24,600
E oggi come oggi significa praticamente qualsiasi cosa.

81
00:06:25,040 --> 00:06:31,760
E quindi, a questo punto, riesci a immaginare quante volte al giorno NEL MONDO viene invocato

82
00:06:31,760 --> 00:06:33,920
un algoritmo di ordinamento?

83
00:06:33,920 --> 00:06:37,000
Il conteggio va fatto in trilioni.

84
00:06:37,000 --> 00:06:43,240
Oggi come oggi è difficile che qualcuno scriva il proprio algoritmo di ordinamento.

85
00:06:43,240 --> 00:06:46,200
Avviene, ma solo in casi particolari.

86
00:06:46,200 --> 00:06:53,200
E per questo motivo le migliori implementazioni di tali algoritmi sono già presenti sotto

87
00:06:53,200 --> 00:06:58,160
forma di funzioni invocabili all'interno degli strumenti software che i programmatori

88
00:06:58,160 --> 00:06:59,560
solitamente utilizzano.

89
00:06:59,560 --> 00:07:05,080
Quindi l'idea di fondo della ricerca è che se si riescono a migliorare le performance

90
00:07:05,080 --> 00:07:10,800
di tali funzioni, sostituendole poi all'interno dei linguaggi, dei compilatori e dei chip,

91
00:07:10,800 --> 00:07:16,840
il beneficio che ne deriva è enorme e viene propagato in maniera relativamente facile e

92
00:07:16,840 --> 00:07:21,080
trasparente al software realizzato tramite tali strumenti.

93
00:07:21,520 --> 00:07:25,240
I ricercatori lavorano sempre a nuovi algoritmi di base.

94
00:07:25,240 --> 00:07:30,400
Migliorare infatti le performance di questi porta chiaramente ricadute positive a tutti

95
00:07:30,400 --> 00:07:31,400
i livelli.

96
00:07:31,400 --> 00:07:37,560
Ora ci sarebbe tanto da dire su questo argomento, sul concetto di efficienza, sulle caratteristiche

97
00:07:37,560 --> 00:07:42,720
dei algoritmi eccetera, ma per quello che ci interessa oggi accontentiamoci di tenere

98
00:07:42,720 --> 00:07:44,080
a mente questo fatto.

99
00:07:44,080 --> 00:07:49,560
Un algoritmo più performante consuma meno risorse, quindi può essere eseguito su processori

100
00:07:49,560 --> 00:07:54,560
meno potenti, spreca meno energia e fa il suo lavoro in meno tempo.

101
00:07:54,560 --> 00:07:58,600
Da tutto questo derivano tutta una serie di vantaggi tecnici.

102
00:07:58,600 --> 00:08:03,920
In pratica, migliorare gli algoritmi di base incrementa di molto la qualità del software

103
00:08:03,920 --> 00:08:07,280
sovrastante rendendolo più leggero e veloce.

104
00:08:07,280 --> 00:08:20,600
Adesso la seconda nozione da tenere a mente riguarda invece il linguaggio Assembly.

105
00:08:20,600 --> 00:08:27,200
Anche qui, senza essere tecnici che tanto non ci serve, Assembly è un linguaggio molto

106
00:08:27,200 --> 00:08:32,440
simile alle istruzioni che si utilizzano normalmente per istruire i processori.

107
00:08:32,680 --> 00:08:39,000
Diciamo che è quasi la lingua nella quale si può dialogare direttamente con una CPU.

108
00:08:39,000 --> 00:08:43,600
Naturalmente, nella frase che ho appena detto, quel quasi è molto importante.

109
00:08:43,600 --> 00:08:50,880
Infatti, questo linguaggio, come tutti i linguaggi, è una strazione, cioè ha lo scopo di permettere

110
00:08:50,880 --> 00:08:57,120
ai programmatori di ignorare le peculiarità dei singoli processori che possono differire

111
00:08:57,120 --> 00:08:59,560
a seconda di tipo, modello, marca.

112
00:08:59,560 --> 00:09:05,960
Ma siccome si tratta di un set di istruzioni molto complesse da combinare insieme direttamente

113
00:09:05,960 --> 00:09:13,720
per ottenere ciò che si desidera, la programmazione, in pratica, si svolge utilizzando altri linguaggi

114
00:09:13,720 --> 00:09:19,120
definiti comunemente ad alto livello, che sono a loro volta astrazioni di Assembly

115
00:09:19,120 --> 00:09:22,400
e sono più semplici da utilizzare per noi umani.

116
00:09:22,840 --> 00:09:28,800
Tali linguaggi vengono poi tradotti in codice Assembly e questo codice viene a sua volta

117
00:09:28,800 --> 00:09:34,160
tradotto nelle istruzioni proprie dello specifico processore prima di dargliele in pasto.

118
00:09:34,160 --> 00:09:37,840
Ok, so che sembra complicato, ma non lo è.

119
00:09:37,840 --> 00:09:40,320
Prova a seguirmi sul ragionamento.

120
00:09:40,320 --> 00:09:45,000
Hai mai visto un esempio di codice sorgente di un qualsiasi software?

121
00:09:45,000 --> 00:09:52,200
Avrai notato che, a prescindere dal linguaggio in cui era scritto, la sintassi, pur non essendo

122
00:09:52,680 --> 00:09:56,800
una lingua corrente, ha qualcosa di simile all'inglese?

123
00:09:56,800 --> 00:10:03,960
Magari una funzione inizia con la parola function o una variabile definita con var o una condizione

124
00:10:03,960 --> 00:10:04,960
con if?

125
00:10:04,960 --> 00:10:08,040
Ecco, questo è un linguaggio ad alto livello.

126
00:10:08,040 --> 00:10:13,400
Quando un programma scritto in questo modo deve essere eseguito, lo si fa elaborare ad

127
00:10:13,400 --> 00:10:18,880
un altro programma chiamato compilatore, che prende tutte le istruzioni scritte in questa

128
00:10:18,880 --> 00:10:25,800
specie di inglese e le trasforma in istruzioni assembly, che risultano molto più complesse.

129
00:10:25,800 --> 00:10:31,960
Tramite poi un secondo programma, chiamato assembler, il codice assembly viene trasformato

130
00:10:31,960 --> 00:10:37,880
nelle vere e proprie istruzioni per il processore, ancora più complesse, e finalmente quest'ultimo

131
00:10:37,880 --> 00:10:41,360
può eseguire i comandi che gli sono stati impartiti.

132
00:10:41,360 --> 00:10:47,120
Se questi passaggi che ti ho descritto ti sono chiari, direi che per quello che dobbiamo

133
00:10:47,120 --> 00:10:49,160
affrontare oggi non ci serve altro.

134
00:10:49,160 --> 00:11:00,760
Torniamo quindi all'argomento principale dell'episodio.

135
00:11:00,760 --> 00:11:06,600
Abbiamo detto che un certo motore di machine learning ha inventato un nuovo algoritmo, ma

136
00:11:06,600 --> 00:11:10,200
com'è possibile che un software inventi un altro software?

137
00:11:10,200 --> 00:11:14,800
Beh, in questo particolare caso tutto è iniziato dal concetto di gioco.

138
00:11:15,480 --> 00:11:21,080
Alphadev non è il primo sistema messo a punto dal team di DeepMind, prima di esso infatti

139
00:11:21,080 --> 00:11:26,640
sono stati realizzati altri software di machine learning e alcuni di questi anche hanno fatto

140
00:11:26,640 --> 00:11:27,640
notizia.

141
00:11:27,640 --> 00:11:33,800
C'è stato ad esempio AlphaGo, che ha battuto il campione mondiale del gioco Go e che poi

142
00:11:33,800 --> 00:11:40,720
si è evoluto in AlphaZero, che è in grado di giocare a Go, a scacchi e persino a Shoji,

143
00:11:40,720 --> 00:11:44,080
quel gioco che a volte viene chiamato scacchi giapponesi.

144
00:11:44,360 --> 00:11:50,320
Poi c'è stato Alphastar, che ha sconfitto i migliori giocatori mondiali del famoso videogame

145
00:11:50,320 --> 00:11:52,880
Starcraft 2 della Blizzard.

146
00:11:52,880 --> 00:11:59,040
Insomma, Alphadev ha a tutti gli effetti degli antenati illustri, ma questi sembrano essere

147
00:11:59,040 --> 00:12:03,600
specializzati nell'ambito del gioco e in realtà ciò non è un caso.

148
00:12:03,600 --> 00:12:10,320
I giochi che presentano tante possibili scelte per ogni mossa infatti, come ad esempio gli

149
00:12:10,320 --> 00:12:16,880
scacchi o i videogame di strategia in tempo reale, si prestano molto bene all'impiego

150
00:12:16,880 --> 00:12:22,840
di una particolare tecnica di machine learning chiamata reinforcement learning.

151
00:12:22,840 --> 00:12:28,560
Il reinforcement learning funziona più o meno in questo modo, si istruisce un'intelligenza

152
00:12:28,560 --> 00:12:35,760
artificiale per farle tentare di conseguire un dato obiettivo e la si premia se riesce

153
00:12:35,760 --> 00:12:39,800
nell'intento oppure la si penalizza se fallisce.

154
00:12:40,280 --> 00:12:45,240
Nel nostro caso specifico, rapportando il tutto alla dimensione del gioco, si fa giocare

155
00:12:45,240 --> 00:12:52,400
la I al gioco designato e ad ogni mossa la si premia se la mossa scelta la avvicina alla

156
00:12:52,400 --> 00:12:55,320
vittoria o la si penalizza in caso contrario.

157
00:12:55,320 --> 00:13:01,240
Ad ogni operazione, in questo modo, l'algoritmo memorizza se la sua scelta è stata buona

158
00:13:01,240 --> 00:13:08,080
o meno e, giocando miliardi di partite, impara come comportarsi nelle più varie situazioni

159
00:13:08,080 --> 00:13:09,080
del gioco.

160
00:13:09,080 --> 00:13:15,120
Anche se all'apparenza questo potrebbe sembrare un compito semplice per una intelligenza artificiale,

161
00:13:15,120 --> 00:13:20,280
si tratta in realtà di qualcosa di molto complesso perché una stessa mossa può avere

162
00:13:20,280 --> 00:13:23,720
un valore diverso a seconda di tantissime altre condizioni.

163
00:13:23,720 --> 00:13:29,220
Se pensiamo ad esempio agli scacchi, muovere il re può avere senso se ad esempio è sotto

164
00:13:29,220 --> 00:13:35,640
scacco, ma ne ha molto meno se nel muoverlo lo esponiamo all'essere mangiato da un pezzo

165
00:13:35,640 --> 00:13:36,640
avversario.

166
00:13:36,960 --> 00:13:42,120
Si tratta di sviluppare una notevole capacità decisionale che fino ad un certo livello di

167
00:13:42,120 --> 00:13:47,680
complessità per noi umani è abbastanza naturale, ma non lo è affatto per una macchina.

168
00:13:47,680 --> 00:13:53,480
Immagina che il tuo obiettivo ad esempio sia andare a Roma, puoi prendere l'auto o comprare

169
00:13:53,480 --> 00:13:59,160
un biglietto aereo, tanto per dirne una, ma la scelta giusta cambia in base a dove ti

170
00:13:59,160 --> 00:14:05,280
trovi, a quanto traffico c'è, a quanto puoi spendere e a mille altri fattori, senza contare

171
00:14:05,280 --> 00:14:08,560
poi gli imprevisti, uno sciopero, un incidente e così via.

172
00:14:08,560 --> 00:14:14,320
Da umano te la caveresti facilmente in una situazione del genere, ma insegnare ad un

173
00:14:14,320 --> 00:14:20,720
software come comportarsi efficientemente di fronte ad una molteplicità di casi diventa

174
00:14:20,720 --> 00:14:22,440
estremamente complesso.

175
00:14:22,440 --> 00:14:27,760
I giochi sono quindi un ambiente perfetto per questo tipo di machine learning, perché

176
00:14:27,760 --> 00:14:33,280
seppur presentino un alto grado di incertezza hanno comunque un set di regole limitato.

177
00:14:33,280 --> 00:14:39,680
È relativamente facile capire chi vince e chi perde e di norma non si verificano eventi

178
00:14:39,680 --> 00:14:40,680
imprevisti.

179
00:14:40,680 --> 00:14:48,400
Ovviamente in quest'ottica l'obiettivo principale della IA è vincere la partita e per far sì

180
00:14:48,400 --> 00:14:54,040
che essa possa elaborare le informazioni, sia le ricompense che le penalità che le

181
00:14:54,040 --> 00:14:59,640
probabilità di vittoria vengono espresse tramite tutta una serie di complesse funzioni

182
00:14:59,640 --> 00:15:00,640
matematiche.

183
00:15:00,640 --> 00:15:13,200
Come abbiamo detto prima però, Alphadev non ha avuto a che fare con un classico gioco

184
00:15:13,200 --> 00:15:18,640
umano né con un videogame, esso ha dovuto lavorare su altri algoritmi che in linea

185
00:15:18,640 --> 00:15:21,840
di principio sono qualcosa di abbastanza diverso da un gioco.

186
00:15:21,840 --> 00:15:26,980
Per questo motivo, per raggiungere il loro obiettivo, i programmatori di DeepMind hanno

187
00:15:26,980 --> 00:15:32,260
trasformato la ricerca di un algoritmo di ordinamento più veloce in una sorta di gioco

188
00:15:32,260 --> 00:15:34,780
progettato apposta per Alphadev.

189
00:15:34,780 --> 00:15:39,820
La vittoria in questo gioco consisteva appunto nello sviluppare un algoritmo che prima di

190
00:15:39,820 --> 00:15:46,420
tutto funzionasse correttamente e poi che fosse anche più veloce dei suoi predecessori.

191
00:15:46,420 --> 00:15:53,100
Ad ogni mossa Alphadev selezionava e utilizzava una nuova istruzione dal set assembly che aveva

192
00:15:53,100 --> 00:15:58,220
a disposizione e veniva premiato se si avvicinava maggiormente all'obiettivo.

193
00:15:58,220 --> 00:16:04,180
Stabilite queste regole, l'IA ha giocato un numero enorme di partite, gareggiando contro

194
00:16:04,180 --> 00:16:10,740
se stessa e cercando ogni volta di stabilire il record di punteggio, attuando così una

195
00:16:10,740 --> 00:16:15,620
modalità di apprendimento che prende il nome di Deep Reinforcement Learning.

196
00:16:15,620 --> 00:16:21,540
Secondo gli sviluppatori di DeepMind, cito, il numero di possibili combinazioni di istruzioni

197
00:16:21,540 --> 00:16:27,820
è simile al numero di particelle dell'universo e al numero di possibili combinazioni dimosse

198
00:16:27,820 --> 00:16:35,540
nei giochi degli scacchi e del go messi insieme, e una singola partita sbagliata invalida l'intero

199
00:16:35,540 --> 00:16:36,540
algoritmo.

200
00:16:36,540 --> 00:16:42,220
Ad ogni iterazione, quindi, dopo aver aggiunto l'istruzione scelta, Alphadev valutava la

201
00:16:42,220 --> 00:16:46,780
correttezza dell'algoritmo, confrontando il risultato ottenuto con quello atteso.

202
00:16:47,100 --> 00:16:51,780
La ricompensa scattava sia per la correttezza sia per la maggiore velocità.

203
00:16:51,780 --> 00:16:57,820
Così facendo, alla fine, Alphadev ha scoperto un nuovo algoritmo di ordinamento che ha portato

204
00:16:57,820 --> 00:17:05,860
miglioramenti fino al 70% per le sequenze più brevi e circa dell'1,7% per le sequenze

205
00:17:05,860 --> 00:17:08,820
che superano i 250.000 elementi.

206
00:17:08,820 --> 00:17:14,340
Un dettaglio molto interessante, poi, è che, differentemente da come avviene nel caso

207
00:17:14,340 --> 00:17:20,300
dei large language model, non è stato necessario basarsi su esempi precedentemente creati da

208
00:17:20,300 --> 00:17:26,740
umani, ma il sistema ha scoperto da solo la propria strada verso la risoluzione del problema.

209
00:17:26,740 --> 00:17:33,620
È una differenza che va ben colta perché l'approccio del Deep Reinforcement Learning

210
00:17:33,620 --> 00:17:40,860
è molto più utile rispetto all'LLM quando si cerca di produrre qualcosa di nuovo e migliore

211
00:17:40,860 --> 00:17:44,060
rispetto a quanto già fatto da menti umane.

212
00:17:44,540 --> 00:17:50,220
Qui non parliamo più, infatti, di una collezione enorme di esempi a cui attingere per creare

213
00:17:50,220 --> 00:17:52,060
una sequenza di parole sensate.

214
00:17:52,060 --> 00:17:57,820
Qui il concetto è risolvere un problema esplorando nuovi approcci e nuove combinazioni

215
00:17:57,820 --> 00:17:59,020
mai provate prima.

216
00:18:06,900 --> 00:18:12,620
Ora, al di là dei dettagli tecnici per i quali ti lascio il paper originale in descrizione,

217
00:18:12,700 --> 00:18:18,060
la cosa secondo me più interessante di questa storia è che l'algoritmo di ordinamento

218
00:18:18,060 --> 00:18:23,860
è stato sviluppato utilizzando un approccio totalmente diverso dai precedenti sotto vari

219
00:18:23,860 --> 00:18:24,860
aspetti.

220
00:18:24,860 --> 00:18:30,060
Innanzitutto, per anni i ricercatori hanno progettato e realizzato algoritmi di base

221
00:18:30,060 --> 00:18:35,900
utilizzando il ragionamento e l'intuito, mentre questo nuovo risultato è stato ottenuto

222
00:18:35,900 --> 00:18:41,660
letteralmente effettuando milioni di tentativi fino a scoprire la giusta combinazione di

223
00:18:41,700 --> 00:18:42,700
elementi.

224
00:18:42,700 --> 00:18:48,380
So che a prima vista è qualcosa che potrebbe ricordare il concetto di forza bruta, che

225
00:18:48,380 --> 00:18:54,540
di solito non è mai la migliore delle soluzioni auspicabili, ma la realtà è che il reinforcement

226
00:18:54,540 --> 00:18:59,540
learning è molto di più di un algoritmo di forza bruta e, risultati alla mano, la

227
00:18:59,540 --> 00:19:04,340
scelta di utilizzarlo ha portato a superare un limite che sembrava ormai definitivo.

228
00:19:04,340 --> 00:19:09,660
Poi, un'altra peculiarità è che l'intera lavorazione è stata eseguita utilizzando

229
00:19:09,660 --> 00:19:16,140
Assembly e non un linguaggio ad alto livello e questo ha rappresentato un'ulteriore differenza

230
00:19:16,140 --> 00:19:21,260
nell'approccio perché gli umani in generale non lavorano sugli algoritmi Assembly.

231
00:19:21,260 --> 00:19:28,420
Questa scelta aveva un duplice scopo, innanzitutto restringeva il ventaglio di possibili combinazioni

232
00:19:28,420 --> 00:19:35,060
di istruzioni perché Assembly è meno articolato di un qualsiasi linguaggio a livello superiore

233
00:19:35,060 --> 00:19:40,940
e poi eliminava un livello di complessità che poteva nascondere delle inefficienze.

234
00:19:40,940 --> 00:19:45,860
Se infatti pensiamo che un'istruzione di un linguaggio ad alto livello viene trasformata

235
00:19:45,860 --> 00:19:52,540
solitamente in una serie di istruzioni Assembly, possiamo anche supporre che una lunga sequenza

236
00:19:52,540 --> 00:19:57,700
di operazioni ad alto livello possa generare una combinazione in Assembly non ottimale.

237
00:19:57,700 --> 00:20:03,700
In teoria i compilatori dovrebbero evitare queste condizioni, ma non sempre è possibile

238
00:20:03,700 --> 00:20:09,520
farlo, prevedere tutte le possibili combinazioni che un programmatore potrebbe decidere di utilizzare

239
00:20:09,520 --> 00:20:11,380
è praticamente impossibile.

240
00:20:11,380 --> 00:20:17,700
Quindi, in pratica, Assembly rappresenta un ambiente più flessibile in cui operare

241
00:20:17,700 --> 00:20:23,980
e utilizzandolo direttamente Alphadev ha potuto eliminare completamente tutto lo strato di

242
00:20:23,980 --> 00:20:29,260
incertezza dovuto all'astrazione causata da un qualsiasi linguaggio, lasciando poi

243
00:20:29,260 --> 00:20:34,380
ai programmatori umani il compito di ricostruire il nuovo algoritmo a livello superiore.

244
00:20:34,380 --> 00:20:40,860
E nello specifico, in DeepMind, hanno riportato tutto il lavoro fatto da Alphadev in linguaggio

245
00:20:40,860 --> 00:20:46,740
C++ e poi l'hanno reso open e, altra nota positiva, l'hanno inserito in una delle

246
00:20:46,740 --> 00:20:48,700
librerie più utilizzate al mondo.

247
00:20:48,700 --> 00:20:54,860
Ciò significa che questo codice migliorato verrà ora utilizzato da centinaia di migliaia

248
00:20:54,860 --> 00:21:00,260
di programmatori e software e tutto ciò non può che essere un'ottima notizia per

249
00:21:00,260 --> 00:21:01,620
noi e per la società.

250
00:21:09,620 --> 00:21:15,660
Per via del suo approccio totalmente diverso da quello abitualmente utilizzato fino ad ora,

251
00:21:15,660 --> 00:21:21,740
Alphadev, nello svolgere il suo compito, ha anche prodotto alcuni risultati molto singolari

252
00:21:21,740 --> 00:21:22,820
e interessanti.

253
00:21:23,260 --> 00:21:28,980
Un esempio di ciò è rappresentato da una serie di strane sequenze di istruzioni che

254
00:21:28,980 --> 00:21:34,540
i ricercatori di DeepMind hanno chiamato Alphadev Swap & Copy Moves.

255
00:21:34,540 --> 00:21:39,860
A livello concettuale, infatti, si tratta di qualcosa di molto simile alla mossa 37

256
00:21:39,860 --> 00:21:44,700
di AlphaGo che la EA mise in campo contro il campione mondiale di Go.

257
00:21:44,700 --> 00:21:51,220
Durante quella leggendaria partita, l'intelligenza artificiale aveva eseguito una mossa talmente

258
00:21:51,220 --> 00:21:57,460
controintuitiva che aveva stupito tutti gli esperti, campione compreso, ma che alla fine

259
00:21:57,460 --> 00:21:59,860
l'aveva portata a vincere il match.

260
00:21:59,860 --> 00:22:06,420
Con le sue Swap & Copy Moves, Alphadev a suo modo ha fatto qualcosa di simile, implementando

261
00:22:06,420 --> 00:22:11,300
alcune operazioni abbastanza banali in modo del tutto singolare e fuori da ciò che i

262
00:22:11,300 --> 00:22:13,700
ricercatori sono abituati a vedere.

263
00:22:13,700 --> 00:22:20,700
In pratica, nel proprio algoritmo, in alcuni casi, la EA ha deciso di saltare a piepari

264
00:22:20,700 --> 00:22:26,340
alcune istruzioni nel flusso del codice, istruzioni che fino ad ora erano considerate

265
00:22:26,340 --> 00:22:29,780
indispensabili per il corretto funzionamento del processo.

266
00:22:29,780 --> 00:22:35,220
Nello specifico, il fenomeno si è manifestato nel caso in cui venga calcolato l'ordinamento

267
00:22:35,220 --> 00:22:41,100
per otto numeri, dove alcune istruzioni di confronto semplicemente mancano nell'algoritmo.

268
00:22:41,100 --> 00:22:47,620
A prima vista, questo comportamento è apparso come un errore, ma poi, verificando meglio

269
00:22:47,620 --> 00:22:53,220
nel codice, si è scoperto che, per via di come era strutturato il processo, per quel

270
00:22:53,220 --> 00:22:57,260
particolare caso semplicemente quei confronti non servivano.

271
00:22:57,260 --> 00:23:04,620
Se essi fossero stati implementati, infatti, avrebbero restituito un unico valore, lo stesso,

272
00:23:04,620 --> 00:23:08,620
sempre, ad ogni esecuzione con qualsiasi sequenza di input.

273
00:23:08,620 --> 00:23:11,380
Quindi, banalmente, erano superflui.

274
00:23:11,820 --> 00:23:18,020
Questo fatto mostra come una intelligenza di reinforcement learning sia in grado letteralmente

275
00:23:18,020 --> 00:23:23,380
di scoprire soluzioni più efficienti, anche quando queste, apparendo contrarie ad ogni

276
00:23:23,380 --> 00:23:28,700
logica, sono, invece, molto difficili da individuare con intuito e creatività.

277
00:23:28,700 --> 00:23:42,580
In DeepMind, poi, si sono concentrati particolarmente sul miglioramento degli algoritmi di ordinamento

278
00:23:42,580 --> 00:23:46,180
per sequenze brevi, fatte di 3-5 elementi.

279
00:23:46,180 --> 00:23:52,180
Tali algoritmi sono, infatti, tra i più utilizzati, perché vengono spesso impiegati più volte

280
00:23:52,180 --> 00:23:58,220
come parte di funzioni di ordinamento di sequenze più ampie e, quindi, il loro miglioramento

281
00:23:58,220 --> 00:24:03,100
può portare ad una velocizzazione complessiva per qualsiasi numero di elementi.

282
00:24:03,100 --> 00:24:08,980
Questa focalizzazione ha, quindi, portato ad un ulteriore risultato particolarmente

283
00:24:08,980 --> 00:24:14,980
interessante che è venuto fuori per la funzione chiamata varsort4, cioè la funzione di ordinamento

284
00:24:14,980 --> 00:24:17,020
di liste di 4 elementi.

285
00:24:17,020 --> 00:24:22,300
Come accennavamo poco fa, nei moderni linguaggi di programmazione, la funzione normalmente

286
00:24:22,300 --> 00:24:28,020
invocata per l'ordinamento, che di solito si chiama sort o qualcosa del genere, nasconde

287
00:24:28,020 --> 00:24:33,020
in realtà una serie di funzioni diverse al proprio interno, che vengono impiegate

288
00:24:33,020 --> 00:24:35,740
a seconda del numero di elementi da ordinare.

289
00:24:35,740 --> 00:24:42,140
In pratica, ciò vuol dire che se io da programmatore utilizzo la funzione sort, questa a sua volta

290
00:24:42,140 --> 00:24:49,220
conta gli elementi da ordinare e se sono 2 invoca sort2, se sono 3 invoca sort3, se

291
00:24:49,220 --> 00:24:55,900
sono 4 sort4 e così via, fino ad un certo numero che varia a seconda dell'implementazione.

292
00:24:56,300 --> 00:25:02,180
Poi, superato tale numero, vengono utilizzate combinazioni di tutte queste funzioni per

293
00:25:02,180 --> 00:25:03,660
sequenze più piccole.

294
00:25:03,660 --> 00:25:12,900
Ebbene, Alphadev ha scoperto che per una lista di 4 elementi questo non è il modo più efficiente

295
00:25:12,900 --> 00:25:14,940
di procedere, almeno in assembly.

296
00:25:14,940 --> 00:25:18,420
Al contrario, ha utilizzato il seguente approccio.

297
00:25:18,420 --> 00:25:23,460
Come già noto, se gli elementi sono 2 chiama la funzione varsort2, se gli elementi sono

298
00:25:23,460 --> 00:25:31,180
3 chiama varsort3, ma se gli elementi sono più di 3 chiama comunque varsort3 sui primi

299
00:25:31,180 --> 00:25:39,700
tre elementi e poi invoca una versione semplificata di varsort4 che lavora sul risultato parzialmente

300
00:25:39,700 --> 00:25:41,420
ordinato da varsort3.

301
00:25:41,420 --> 00:25:46,540
Ok, lo so che è un processo un po' complicato da descrivere a parole e da immaginare, ma

302
00:25:46,540 --> 00:25:50,660
se vuoi trovi un semplice schema nel paper alla figura 4.

303
00:25:51,100 --> 00:25:57,500
Ad ogni modo, cambiando questa strategia che prima era considerata basilare e ovvia quasi

304
00:25:57,500 --> 00:26:02,980
scontata, si è scoperto che si ottiene un notevole incremento in termini di velocità

305
00:26:02,980 --> 00:26:06,620
complessiva e quindi di efficienza dell'algoritmo.

306
00:26:14,500 --> 00:26:19,020
Insomma, migliorando uno degli algoritmi più utilizzati dagli sviluppatori di tutto il

307
00:26:19,020 --> 00:26:24,300
mondo, Alphadev va dimostrato come un'intelligenza artificiale e può essere utilizzata in modo

308
00:26:24,300 --> 00:26:27,820
da avere un impatto positivo e reale sulle nostre vite.

309
00:26:27,820 --> 00:26:32,980
Utilizzandolo in questo modo, questo motore di Machine Learning può rappresentare un'arma

310
00:26:32,980 --> 00:26:38,300
potentissima nello sviluppo di strumenti che contribuiscono a migliorare l'intero panorama

311
00:26:38,300 --> 00:26:42,580
informatico e a risolvere problemi a vantaggio dell'intera società.

312
00:26:42,580 --> 00:26:48,540
Migliorando Alphadev, o addirittura sviluppando dei competitor più potenti, si potrebbero

313
00:26:48,540 --> 00:26:54,020
ottimizzare algoritmi direttamente nei vari linguaggi ad alto livello e ciò potrebbe

314
00:26:54,020 --> 00:26:57,340
risultare ancora più utile nel mondo dello sviluppo software.

315
00:26:57,340 --> 00:27:04,260
Ma anche così, le creazioni di Alphadev, come le Swap & Copy Moves o la Varsort 4, non solo

316
00:27:04,260 --> 00:27:09,180
dimostrano che esso può migliorare un algoritmo esistente, ma addirittura che è in grado

317
00:27:09,180 --> 00:27:14,740
di trovare nuove soluzioni del tutto innovative a problemi di complessità enorme.

318
00:27:15,180 --> 00:27:21,860
E questa cosa è possibile perché, a differenza dei large language model come ChatGPT, gli

319
00:27:21,860 --> 00:27:28,340
algoritmi di Deep Reinforcement Learning come Alphadev sono in grado realmente di creare

320
00:27:28,340 --> 00:27:36,100
qualcosa di nuovo, di inventare soluzioni e non solo di riprodurre quello che è il comportamento

321
00:27:36,100 --> 00:27:37,100
umano.

322
00:27:37,100 --> 00:27:47,460
Bene, finisce qui l'episodio di oggi.

323
00:27:47,460 --> 00:27:52,220
Per tutti i dettagli riguardanti la notizia, l'algoritmo, eccetera, ti rimando ovviamente

324
00:27:52,220 --> 00:27:53,780
ai link in descrizione.

325
00:27:53,780 --> 00:28:00,140
Ringrazio come sempre Edoardo e Carlo per la loro donazione mensile e poi Corrado che

326
00:28:00,140 --> 00:28:05,300
ha fatto la sua donazione ormai ben due mesi fa, ma io sono super ingolfato e ci ho messo

327
00:28:05,300 --> 00:28:07,260
una vita a far uscire questo episodio.

328
00:28:07,260 --> 00:28:13,460
A proposito, in queste settimane ho preparato una roba interessantissima, ma che per ora

329
00:28:13,460 --> 00:28:14,460
è top secret.

330
00:28:14,460 --> 00:28:18,460
Se riesco spero di pubblicarla già al prossimo episodio.

331
00:28:18,460 --> 00:28:23,580
Tu intanto, se apprezzi il mio lavoro, fai come Carlo, Edoardo e Corrado e dimostralo

332
00:28:23,580 --> 00:28:24,660
concretamente.

333
00:28:24,660 --> 00:28:30,460
Sul sito Pensieri in Codice trovi tutti gli episodi, tutti i link per le donazioni, le

334
00:28:30,460 --> 00:28:33,460
affiliazioni, il gruppo Telegram, il canale Telegram, eccetera.

335
00:28:33,620 --> 00:28:39,540
E in più, da oggi, se doni più di 10€, anche accumulando più donazioni e conteggiando

336
00:28:39,540 --> 00:28:44,780
le donazioni passate, ricevi a casa tutti gli adesivi e il segnalibro con le nuove

337
00:28:44,780 --> 00:28:45,780
grafiche.

338
00:28:45,780 --> 00:28:49,020
Basta che mi scrivi il tuo indirizzo per email o su Telegram.

339
00:28:49,020 --> 00:28:54,220
A proposito poi di Telegram, ti ricordo che l'accesso al gruppo di Pensieri in Codice

340
00:28:54,220 --> 00:29:00,820
è su autorizzazione per via dei bot che infestano la piattaforma, quindi ti consiglio di scrivermi

341
00:29:00,820 --> 00:29:05,100
per velocizzare le procedure di verifica, ti basta cercare chiocciola valerio galano

342
00:29:05,100 --> 00:29:08,100
direttamente nella casella di ricerca di Telegram.

343
00:29:08,100 --> 00:29:13,900
Infine, non dimenticare di condividere l'episodio con amici, parenti, gruppi, eccetera, che

344
00:29:13,900 --> 00:29:18,580
come al solito io cerco di farti fare bella figura e a te spargere la voce non costa

345
00:29:18,580 --> 00:29:19,580
nulla.

346
00:29:19,580 --> 00:29:24,460
E basta, grazie per aver ascoltato fin qui, noi ci sentiamo al prossimo episodio e tu non

347
00:29:24,460 --> 00:29:29,780
dimenticare mai che un informatico risolve problemi, a volte, anche usando il computer.

