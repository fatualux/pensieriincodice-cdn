1
00:00:00,000 --> 00:00:10,000
Pensieri in codice, idee dal mondo del software a cura di Valerio Galano.

2
00:00:20,000 --> 00:00:25,000
Salve a tutti e ben ritrovati per un nuovo episodio di Pensieri in codice.

3
00:00:26,000 --> 00:00:31,000
L'uscita ufficiale della versione numero 8 del noto linguaggio di programmazione PHP

4
00:00:31,000 --> 00:00:35,000
è prevista per la fine di novembre 2020.

5
00:00:35,000 --> 00:00:39,000
Si tratta di una release molto importante per la storia di un linguaggio

6
00:00:39,000 --> 00:00:43,000
che è cambiato moltissimo nel corso dei suoi 25 anni di vita.

7
00:00:43,000 --> 00:00:46,000
Pensieri in codice non è un podcast tecnico,

8
00:00:46,000 --> 00:00:51,000
quindi non intendo parlare in dettaglio delle novità o delle caratteristiche deprecate.

9
00:00:51,000 --> 00:00:57,000
Quello che invece vorrei fare è provare a esaminare un po' l'evoluzione di questo linguaggio

10
00:00:57,000 --> 00:01:04,000
che nel corso degli anni si è trovato ad essere al tempo stesso uno dei più diffusi nel campo dello sviluppo web,

11
00:01:04,000 --> 00:01:07,000
ma anche uno dei più anziani in circolazione.

12
00:01:07,000 --> 00:01:14,000
In competizione quindi con altri linguaggi più moderni, più agili e più liberi di evolversi

13
00:01:14,000 --> 00:01:18,000
nelle direzioni che i community e sviluppatori sceglievano per essi.

14
00:01:18,000 --> 00:01:24,000
In questo episodio vedremo quindi prima un po' di storia del linguaggio e le direzioni prese negli anni

15
00:01:24,000 --> 00:01:31,000
e poi qualche dettaglio in più sulle ultime versioni e sulla prossima release che arriverà a fine anno.

16
00:01:31,000 --> 00:01:39,000
Prima di iniziare però ci tengo a precisare che quanto dirò è frutto di una mia interpretazione e di mie opinioni personali.

17
00:01:39,000 --> 00:01:47,000
Se non siete d'accordo o se volete aggiungere altro, siete liberi di farlo nei commenti o nel gruppo Telegram che trovate in descrizione.

18
00:01:48,000 --> 00:01:49,000
E ora procediamo.

19
00:02:00,000 --> 00:02:11,000
PHP nasce nel 1995 come uno strumento con un obiettivo semplice e preciso, cioè rendere dinamici i contenuti delle pagine web.

20
00:02:11,000 --> 00:02:18,000
Dopo soli due anni nel 1997 con la versione numero 2 diventa un vero e proprio linguaggio,

21
00:02:18,000 --> 00:02:23,000
con alcune funzionalità che perdurano anche oggi a distanza di più di 20 anni.

22
00:02:23,000 --> 00:02:32,000
Nel 1998 con la versione numero 3 lo sviluppo passa da una singola persona ad una piccola community di sviluppatori

23
00:02:32,000 --> 00:02:36,000
ed è allora che ha inizio la vera e propria evoluzione del linguaggio.

24
00:02:37,000 --> 00:02:47,000
Esso inizia ad espandersi anno dopo anno con una raffica di release che vanno dalla 4.0 alla 4.4 tra la metà del 2000 e quella del 2005.

25
00:02:47,000 --> 00:02:57,000
Siamo nel periodo della grande diffusione del web, le persone iniziano ad avere connettività e computer sufficienti per consultare siti web più complessi,

26
00:02:57,000 --> 00:03:05,000
pieni non solo di informazioni ma anche di immagini e riferimenti ad altri siti che potevano essere raggiunti con un clic.

27
00:03:06,000 --> 00:03:11,000
Iniziano quindi a diffondersi nuove tipologie di siti web come i blog e i forum

28
00:03:11,000 --> 00:03:19,000
e iniziano anche a nascere software che semplificano la gestione di questo tipo di piattaforme e parlo ovviamente dei CMS.

29
00:03:19,000 --> 00:03:26,000
Il PHP è la scelta migliore per correre a sviluppare un CMS, in quel periodo è molto in voga,

30
00:03:26,000 --> 00:03:32,000
poi ha una curva di apprendimento molto ripida e infine lascia enormi libertà agli sviluppatori.

31
00:03:33,000 --> 00:03:42,000
Nel frattempo, contemporaneamente a tale diffusione, nel 2004 è già iniziata la riscrittura del motore di compilazione Zend Engine

32
00:03:42,000 --> 00:03:52,000
che avrebbe dato vita alle versioni dalla 5 alla 5.6, le quali hanno poi coperto un arco temporale di più di 10 anni a partire dal 2005.

33
00:03:52,000 --> 00:03:58,000
Per il PHP è proprio il momento di battere il ferro finché è caldo, il web è in espansione,

34
00:03:58,000 --> 00:04:03,000
il linguaggio è ben visto dai singoli sviluppatori e dalle community dell'open source,

35
00:04:03,000 --> 00:04:10,000
CMS come WordPress, Joomla, Drupal e Magento si dividono buona parte dei siti in circolazione.

36
00:04:10,000 --> 00:04:18,000
Ecco dunque che si cerca di assecondare le richieste della community, aggiungendo caratteristiche e subcaratteristiche

37
00:04:18,000 --> 00:04:21,000
per risolvere tutti i problemi che si presentano di anno in anno.

38
00:04:21,000 --> 00:04:30,000
Quello di cui però non si tiene conto, secondo me, è che il web di quel periodo sta esplodendo ma in modo piuttosto caotico.

39
00:04:30,000 --> 00:04:36,000
Tutti, dagli sviluppatori, alle aziende, ai blogger, si muovono in tutte le direzioni,

40
00:04:36,000 --> 00:04:43,000
cercando di capire cosa funziona e cosa no, cosa vale la pena di realizzare e cosa invece va lasciato indietro.

41
00:04:43,000 --> 00:04:50,000
Nel tentare di seguire questo processo, secondo me anche il PHP si sviluppa in modo piuttosto caotico,

42
00:04:50,000 --> 00:04:59,000
contrapponendosi a linguaggi più rigidi come ad esempio Java e demandando agli sviluppatori molti degli aspetti della buona programmazione.

43
00:04:59,000 --> 00:05:05,000
Alcuni tentativi di correggere questa tendenza appaiono chiari nella nascita dei vari framework,

44
00:05:05,000 --> 00:05:10,000
ma anch'essi sono influenzati dal periodo in cui appaiono e in cui si diffondono.

45
00:05:10,000 --> 00:05:17,000
Ad esempio la differenza tra uno Zend Framework, il nome Laminas risale a meno di due anni fa,

46
00:05:17,000 --> 00:05:23,000
e un Laravel è palese a chiunque abbia mai avuto a che fare con entrambi questi framework.

47
00:05:23,000 --> 00:05:33,000
Il primo è sicuramente più flessibile, ha una community più grande, ma è più lento in fase di esecuzione ed è più complesso da utilizzare e da padroneggiare.

48
00:05:33,000 --> 00:05:40,000
Il secondo è più agile, risolve una buona gamma di problemi in modo estremamente semplice e veloce,

49
00:05:40,000 --> 00:05:47,000
ma poi diventa più complicato per uno sviluppatore risolvere problemi che si rivelino un po' più particolari.

50
00:05:47,000 --> 00:05:54,000
In pratica sono bastati pochi anni di distanza, Zend Framework del 2006 mentre Laravel del 2010,

51
00:05:54,000 --> 00:05:58,000
per avere due framework dal carattere totalmente opposto.

52
00:05:58,000 --> 00:06:08,000
E questo secondo me dipende dal fatto che nei anni 10 del 2000 la tendenza dei nuovi linguaggi è stata quella della semplificazione.

53
00:06:08,000 --> 00:06:16,000
Forti delle esperienze fatte con i linguaggi precedenti, infatti i progettisti dei nuovi linguaggi, framework, librerie eccetera,

54
00:06:16,000 --> 00:06:23,000
hanno sviluppato soluzioni semplici e modulari per una vasta gamma ben definita di problemi.

55
00:06:23,000 --> 00:06:27,000
Hanno prodotto documentazioni chiare, lineari ed esaustive.

56
00:06:27,000 --> 00:06:34,000
Hanno creato insomma nuovi prodotti che implementassero solo le parti migliori prese dai prodotti precedenti

57
00:06:34,000 --> 00:06:37,000
e vi hanno poi aggiunto nuove funzionalità e nuove idee.

58
00:06:37,000 --> 00:06:45,000
Sto parlando ovviamente di framework del calibro di AngularJS, Node.js, React ma anche di linguaggi come Go.

59
00:06:45,000 --> 00:06:51,000
Tutti nati intorno al 2010 e tutti dotati di una nuova filosofia di sviluppo.

60
00:06:51,000 --> 00:06:53,000
E dove era il PHP nel frattempo?

61
00:06:53,000 --> 00:07:00,000
Beh, PHP continuava ad essere un pezzo importante del web grazie alle tantissime piattaforme e ai siti attivi

62
00:07:00,000 --> 00:07:07,000
ma al tempo stesso doveva trovare un modo di adeguarsi alla nuova andatura di tutti i nuovi concorrenti.

63
00:07:07,000 --> 00:07:15,000
Ed è così che il 3 dicembre 2015 debutta la versione 7.0 che porta con sé due importanti novità.

64
00:07:16,000 --> 00:07:21,000
La prima è il nuovissimo motore Zend Engine 3 ideato per migliorare le performance

65
00:07:21,000 --> 00:07:27,000
e avviare quella rincorsa nei confronti dei concorrenti che potevano contare su punti di forza

66
00:07:27,000 --> 00:07:30,000
come l'elaborazione asincrona e lato server.

67
00:07:30,000 --> 00:07:35,000
E chi al tempo, come me, già seguiva dei progetti o delle piattaforme in PHP

68
00:07:35,000 --> 00:07:41,000
con questo nuovo motore ha letteralmente visto dimezzare i tempi di esecuzione del codice.

69
00:07:41,000 --> 00:07:47,000
Oltre a ciò, la seconda novità, secondo me, era di tipo più concettuale.

70
00:07:47,000 --> 00:07:53,000
Si iniziava finalmente a eliminare componenti obsoleti e a dare la possibilità a chi avesse voluto

71
00:07:53,000 --> 00:07:56,000
di rendere più rigoroso il proprio codice.

72
00:07:56,000 --> 00:08:00,000
Personalmente, una delle caratteristiche che ho più apprezzato della versione 7.0

73
00:08:00,000 --> 00:08:07,000
è stata la possibilità di specificare, nella dichiarazione di una funzione, i tipi di variabile in input o in output.

74
00:08:08,000 --> 00:08:14,000
Benché, infatti, la possibilità che una variabile possa contenere qualsiasi tipo di dato in qualsiasi momento

75
00:08:14,000 --> 00:08:19,000
possa essere considerato un vantaggio, soprattutto dagli sviluppatori alle prime armi,

76
00:08:19,000 --> 00:08:25,000
secondo me sapere che una variabile potrà contenere solo e soltanto quel tipo di dato

77
00:08:25,000 --> 00:08:28,000
permette di risparmiare codice e tanti imprevisti.

78
00:08:28,000 --> 00:08:34,000
Dalla versione 7 alla 7.4 prende quindi piede quello che io ho vissuto

79
00:08:34,000 --> 00:08:38,000
come un enorme miglioramento della filosofia di questo linguaggio,

80
00:08:38,000 --> 00:08:45,000
con il progressivo miglioramento delle performance, l'integrazione di componenti di largo utilizzo nel core

81
00:08:45,000 --> 00:08:51,000
e l'aggiunta di meccanismi e costrutti che permettono di ridurre la quantità di codice da scrivere.

82
00:08:51,000 --> 00:08:58,000
Molte di queste nuove caratteristiche ricordano molto da vicino i linguaggi in forte espansione negli ultimi anni

83
00:08:58,000 --> 00:09:05,000
e questo non può che fare piacere a chi, come me, ha iniziato a lavorare ed è cresciuto con il PHP.

84
00:09:16,000 --> 00:09:19,000
Ed ora, che succede con PHP 8?

85
00:09:19,000 --> 00:09:25,000
Beh, a giudicare dalla release note, si procede nella stessa direzione della versione 7.

86
00:09:25,000 --> 00:09:30,000
Nella prossima release sono infatti presenti varie migliorie per scrivere codice più compatto,

87
00:09:30,000 --> 00:09:39,000
nuove funzionalità che svolgono operazioni divenute molto comuni e semplificazioni nella sintassi e nell'utilizzo dei tipi.

88
00:09:39,000 --> 00:09:43,000
In descrizione trovate il link a un articolo abbastanza esaustivo sulle novità,

89
00:09:43,000 --> 00:09:49,000
che in realtà sono tantissime e che non c'è tempo di discutere in questo episodio.

90
00:09:49,000 --> 00:09:56,000
Ed è anche per questo motivo che in questi ultimi minuti intendo parlarvi solo di quelle che mi hanno colpito maggiormente.

91
00:09:56,000 --> 00:09:59,000
Iniziamo quindi dal nuovo compilatore JIT.

92
00:09:59,000 --> 00:10:06,000
Detto in due parole, si tratta di un nuovo motore che è in grado di identificare le parti del codice eseguite con maggior frequenza

93
00:10:06,000 --> 00:10:11,000
e quindi compilarle in modo differente per poterle eseguire più rapidamente.

94
00:10:11,000 --> 00:10:15,000
Ho letto vari articoli online che non lo ritengono una buona idea

95
00:10:15,000 --> 00:10:22,000
perché prevedono che il sovraccarico di elaborazione dovuto alla ricerca delle parti calde del codice

96
00:10:22,000 --> 00:10:26,000
sia maggiore del guadagno dato dalla compilazione speciale.

97
00:10:26,000 --> 00:10:28,000
Sinceramente io non sono d'accordo.

98
00:10:28,000 --> 00:10:35,000
Nel corso degli anni ho visto progetti che eseguivano lo stesso codice anche migliaia di volte per chiamata.

99
00:10:35,000 --> 00:10:41,000
Se il JIT compiler riuscisse ad abbattere i tempi di caricamento in casi del genere,

100
00:10:41,000 --> 00:10:44,000
secondo me sarebbe già un buon passo avanti.

101
00:10:44,000 --> 00:10:49,000
Una seconda novità, che già sono certo che utilizzerò tantissimo, è l'operatore null safe.

102
00:10:49,000 --> 00:10:53,000
In pratica, in generale, quando si scrive codice in PHP,

103
00:10:53,000 --> 00:11:00,000
c'è il pericolo che lo stesso metodo possa restituire sia un oggetto, sia un valore nullo.

104
00:11:00,000 --> 00:11:05,000
Per questo motivo, quando si utilizza un metodo del genere, è necessario, per evitare problemi,

105
00:11:05,000 --> 00:11:09,000
controllare che il valore ritornato sia veramente un oggetto.

106
00:11:10,000 --> 00:11:17,000
Altrimenti si rischia di invocare un secondo metodo su un valore null e provocare un errore fatale.

107
00:11:17,000 --> 00:11:22,000
Questo nuovo operatore può invece essere piazzato tra la chiamata concatenata di due metodi.

108
00:11:22,000 --> 00:11:27,000
Se il primo restituisce null, l'operatore null safe non lancia il secondo metodo,

109
00:11:27,000 --> 00:11:31,000
ma restituisce direttamente null, evitando così errori fatali.

110
00:11:31,000 --> 00:11:36,000
Infine, l'ultima novità che mi ha colpito non è particolarmente importante,

111
00:11:36,000 --> 00:11:39,000
ma credo che comunque sia interessante da conoscere.

112
00:11:39,000 --> 00:11:46,000
In pratica, con la versione 8, finalmente gli algoritmi di ordinamento del PHP diventeranno stabili.

113
00:11:46,000 --> 00:11:54,000
Eh sì, perché non so se lo sapevate già, ma gli algoritmi di ordinamento del PHP sono sempre stati di tipo unstable.

114
00:11:54,000 --> 00:11:59,000
Il che vuol dire che non è possibile garantire l'ordinamento di due elementi uguali.

115
00:11:59,000 --> 00:12:05,000
In pratica, ciò significa, ad esempio, che se abbiamo una lista di oggetti che rappresentano degli utenti

116
00:12:05,000 --> 00:12:11,000
e vogliamo ordinarli magari per età, gli utenti con la stessa età capiteranno raggruppati insieme,

117
00:12:11,000 --> 00:12:14,000
ma il loro ordine sarà casuale.

118
00:12:14,000 --> 00:12:20,000
Con la nuova specifica del PHP 8, invece, sarà preservato l'ordine di partenza.

119
00:12:20,000 --> 00:12:26,000
Quindi, se di questi utenti con la stessa età Gino si trovava prima di Pino nella lista iniziale,

120
00:12:26,000 --> 00:12:30,000
allora lo sarà anche nella lista ordinata.

121
00:12:36,000 --> 00:12:40,000
Bene, queste erano le mie idee sul PHP 8.

122
00:12:40,000 --> 00:12:47,000
Io spero che la puntata sia stata interessante e, come al solito, vi invito ad aiutare il progetto

123
00:12:47,000 --> 00:12:54,000
condividendolo sui vostri social e magari partecipando alle discussioni nel gruppo Telegram che trovate in descrizione.

124
00:12:54,000 --> 00:13:00,000
Grazie a tutti per aver ascoltato fin qui e ricordate che un informatico risolve i problemi,

125
00:13:00,000 --> 00:13:02,000
a volte anche usando il computer.

